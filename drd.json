{
  "project_name": "DRD",
  "last_updated": "2024-07-16T23:59:43.940021",
  "files": [
    {
      "filename": "README.md",
      "type": "markdown",
      "last_modified": "2024-07-16T00:34:57.464684",
      "content_preview": "# Dravid (DRD) - AI-Powered CLI Coding Framework  Dravid (DRD) is an advanced, AI-powered CLI coding...",
      "description": "Comprehensive README file for the Dravid (DRD) project, an AI-powered CLI coding framework. It includes detailed information about installation, usage, features, project structure, contributing guidelines, development setup, testing instructions, license details, and use cases for various programming languages and frameworks.",
      "exports": "None"
    },
    {
      "filename": "tests/api/test_dravid_api.py",
      "type": "test_file",
      "last_modified": "2024-07-16T23:51:10.648176",
      "content_preview": "import unittest from unittest.mock import patch, MagicMock from drd.api.dravid_api import (     stre...",
      "description": "Unit tests for the dravid_api module in the DRD project. It tests various functions related to API calls, XML parsing, and response handling. The tests cover streaming API calls, XML parsing, step parsing, and both regular and vision API calls. It uses unittest and mock objects for testing.",
      "exports": "None"
    },
    {
      "filename": "src/drd/cli/ask_handler.py",
      "type": "Python module",
      "last_modified": "2024-07-16T13:21:17.208837",
      "content_preview": "import click import sys from ..utils.api_utils import stream_claude_response, call_dravid_api_with_p...",
      "description": "This module handles the 'ask' command functionality for the DRD CLI tool. It includes functions for reading file content, suggesting file alternatives, and processing user questions. The module interacts with the project metadata, Claude API for generating responses, and handles file-related operations.",
      "exports": "fun:read_file_content,fun:suggest_file_alternative,fun:handle_ask_command"
    },
    {
      "filename": "src/drd/prompts/instructions.py",
      "type": "Python",
      "last_modified": "2024-07-16T23:54:38.588335",
      "content_preview": "def get_instruction_prompt():     return \"\"\"     You are an advanced project setup assistant capable...",
      "description": "Contains a function that provides an instruction prompt for an advanced project setup assistant. The prompt outlines guidelines for generating precise, production-grade instructions for various programming projects, including XML formatting rules, important guidelines, and specific instructions for handling different scenarios.",
      "exports": "fun:get_instruction_prompt"
    },
    {
      "filename": "CONTRIBUTING.md",
      "type": "Markdown",
      "last_modified": "2024-07-12T11:35:06.832838",
      "content_preview": "# Contributing to Dravid (DRD)  First off, thank you for considering contributing to Dravid! It's pe...",
      "description": "CONTRIBUTING.md file providing guidelines for contributing to the Dravid (DRD) project. It includes sections on the code of conduct, how to report bugs, suggest enhancements, submit pull requests, and follow styleguides for git commits, Python code, and documentation. The file also outlines the project's labeling system for issues and pull requests.",
      "exports": "None"
    },
    {
      "filename": "tests/api/test_dravid_parser.py",
      "type": "Python unit test file",
      "last_modified": "2024-07-16T23:53:44.194562",
      "content_preview": "import unittest from unittest.mock import patch, MagicMock import xml.etree.ElementTree as ET from d...",
      "description": "This file contains unit tests for the dravid_parser module in the DRD project. It tests various functions related to XML parsing, response handling, and pretty printing of commands. The tests cover functions like extract_outermost_xml, escape_nested_cdata, escape_special_characters, extract_and_parse_xml, parse_dravid_response, and pretty_print_commands.",
      "exports": "None"
    },
    {
      "filename": "src/drd/utils/api_utils.py",
      "type": "Python module",
      "last_modified": "2024-07-16T00:34:57.485763",
      "content_preview": "import requests import mimetypes import os import json import base64 from typing import Dict, Any, O...",
      "description": "This module contains utility functions for making API calls to the Claude AI service. It includes functions for calling the standard Claude API and the Claude Vision API, handling pagination, streaming responses, and parsing the results. The module also defines constants for API endpoints and configurations.",
      "exports": "fun:get_api_key,fun:get_headers,fun:make_api_call,fun:parse_response,fun:call_dravid_api_with_pagination,fun:call_dravid_vision_api_with_pagination,fun:stream_claude_response,fun:parse_paginated_response,var:API_URL,var:MODEL,var:MAX_TOKENS"
    },
    {
      "filename": "src/drd/prompts/__init__.py",
      "type": "Python module",
      "last_modified": "2024-07-16T11:40:40.664052",
      "content_preview": "from .instructions import get_instruction_prompt from .file_operations import get_file_identificatio...",
      "description": "This is the __init__.py file for the prompts module in the DRD project. It imports and re-exports specific functions from other modules within the prompts package, making them easily accessible when importing from the prompts module. The exported functions are related to generating prompts for instructions, file identification, and file description.",
      "exports": "fun:get_instruction_prompt,fun:get_file_identification_prompt,fun:get_file_description_prompt"
    },
    {
      "filename": "poetry.lock",
      "type": "poetry_lock",
      "last_modified": "2024-07-16T00:34:57.483863",
      "content_preview": "# This file is automatically @generated by Poetry 1.8.3 and should not be changed by hand.  [[packag...",
      "description": "Poetry lock file containing detailed dependency information for the DRD project. It specifies exact versions and hashes for all direct and transitive dependencies, ensuring reproducible builds across different environments.",
      "exports": "None"
    },
    {
      "filename": "tests/metadata/test_common_utils.py",
      "type": "python",
      "last_modified": "2024-07-16T22:46:46.897805",
      "content_preview": "import unittest from unittest.mock import patch, mock_open, MagicMock import os import re import xml...",
      "description": "This file contains unit tests for common utility functions in the DRD project's metadata module. It tests functions like parse_gitignore, should_ignore, get_folder_structure, get_ignore_patterns, generate_file_description, and find_file_with_dravid. The tests use unittest and mock objects to simulate file operations and API calls.",
      "exports": "fun:TestCommonUtils"
    },
    {
      "filename": "src/drd/cli/__init__.py",
      "type": "Python module",
      "last_modified": "2024-07-11T19:23:55.795110",
      "content_preview": "from .main import dravid_cli from .monitor import run_dev_server_with_monitoring  __all__ = ['dravid...",
      "description": "This is the __init__.py file for the drd CLI module. It imports and re-exports key functions from submodules, making them available at the package level. This file facilitates easier imports for users of the DRD CLI tool.",
      "exports": "fun:dravid_cli,fun:run_dev_server_with_monitoring"
    },
    {
      "filename": "src/drd/prompts/metadata_update_prompts.py",
      "type": "Python module",
      "last_modified": "2024-07-16T00:51:48.086804",
      "content_preview": "# File: prompts/metadata_update_prompts.py  def get_file_suggestion_prompt(filename, project_context...",
      "description": "This module contains functions that generate prompts for updating metadata in the DRD project. It includes prompts for suggesting alternative file paths, identifying files that need metadata updates, and generating metadata for specific files. These prompts are designed to be used with an AI assistant to maintain and update project metadata.",
      "exports": "fun:get_file_suggestion_prompt,fun:get_files_to_update_prompt"
    },
    {
      "filename": "tests/utils/test_utils.py",
      "type": "Python Test File",
      "last_modified": "2024-07-16T23:19:19.479426",
      "content_preview": "import unittest import os import json from unittest.mock import patch, mock_open from io import Stri...",
      "description": "This file contains unit tests for utility functions in the DRD project. It tests various print functions (error, success, info, warning, debug, step) from the utils module. The tests use unittest and mock objects to verify the correct output formatting and color coding of messages.",
      "exports": "None"
    },
    {
      "filename": "LICENSE",
      "type": "LICENSE",
      "last_modified": "2024-07-12T11:19:36.001693",
      "content_preview": "MIT License  Copyright (c) 2024 Vysakh Sreenivasan  Permission is hereby granted, free of charge, to...",
      "description": "MIT License file for the DRD project, granting permission to use, modify, and distribute the software under certain conditions. It includes copyright information and disclaimers of warranty and liability.",
      "exports": "None"
    },
    {
      "filename": "tests/metadata/test_rate_limit_handler.py",
      "type": "python",
      "last_modified": "2024-07-16T22:36:49.044782",
      "content_preview": "import unittest from unittest.mock import patch, MagicMock import asyncio import time import logging...",
      "description": "Unit test file for the rate_limit_handler module in the DRD project. It contains test cases for the RateLimiter class and process_files functions, verifying rate limiting functionality, API call handling, and concurrent file processing.",
      "exports": "TestRateLimitHandler"
    },
    {
      "filename": "src/drd/cli/main.py",
      "type": "Python CLI Entry Point",
      "last_modified": "2024-07-14T13:53:18.998528",
      "content_preview": "import click from dotenv import load_dotenv from colorama import init from .commands import dravid_c...",
      "description": "Main entry point for the DRD CLI tool. It defines the command-line interface using Click, sets up various options and arguments, and delegates the execution to the dravid_cli_logic function. The file also handles environment variable loading and colorama initialization for colored output.",
      "exports": "fun:dravid_cli"
    },
    {
      "filename": "src/drd/prompts/file_operations.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:45:44.675604",
      "content_preview": "def get_file_identification_prompt():     return \"\"\"You are a file identification assistant. Based o...",
      "description": "Contains prompts for file operations including identification, description, modification, and file finding",
      "exports": "fun:get_file_identification_prompt,fun:get_file_description_prompt,fun:get_files_to_modify_prompt,fun:find_file_prompt"
    },
    {
      "filename": "tests/utils/test_loader.py",
      "type": "Python test file",
      "last_modified": "2024-07-16T20:56:51.278514",
      "content_preview": "import unittest from unittest.mock import patch, MagicMock import threading import time from io impo...",
      "description": "Unit tests for the Loader class and run_with_loader function from drd.utils.loader module. Tests cover loader animation, custom messages, start/stop functionality, and exception handling.",
      "exports": "None"
    },
    {
      "filename": "tests/metadata/test_updater.py",
      "type": "python_test",
      "last_modified": "2024-07-16T22:34:17.994420",
      "content_preview": "import unittest from unittest.mock import patch, MagicMock, mock_open import xml.etree.ElementTree a...",
      "description": "Unit tests for the metadata updater functionality in the DRD project. Tests cover various scenarios of updating project metadata using the Dravid API, including successful updates, handling of files without changes, and error conditions. The file includes mocking of dependencies and thorough assertions to ensure correct behavior of the update_metadata_with_dravid function.",
      "exports": "None"
    },
    {
      "filename": "src/drd/cli/commands.py",
      "type": "Python module",
      "last_modified": "2024-07-16T23:32:31.356193",
      "content_preview": "import click import sys import os import asyncio from dotenv import load_dotenv from .query import e...",
      "description": "Main command handling module for the DRD CLI tool. It contains functions to handle various CLI commands including query execution, metadata initialization and updating, version checking, and asking open-ended questions. It also includes the core logic for the Dravid CLI, managing different command options and their respective actions.",
      "exports": "fun:handle_query_command,fun:dravid_cli_logic,var:VERSION"
    },
    {
      "filename": "src/drd/prompts/file_metada_desc_prompts.py",
      "type": "Python",
      "last_modified": "2024-07-16T20:21:42.089927",
      "content_preview": "def get_file_metadata_prompt(filename, content, project_context, folder_structure):     return f\"\"\" ...",
      "description": "This file contains a function that generates a prompt for file metadata extraction. It's part of the DRD project's prompts module, used to create context-aware prompts for AI-assisted metadata generation.",
      "exports": "fun:get_file_metadata_prompt"
    },
    {
      "filename": "pyproject.toml",
      "type": "pyproject.toml",
      "last_modified": "2024-07-16T23:32:13.049512",
      "content_preview": "[tool.poetry] name = \"dravid\" version = \"0.10.0\" description = \"A CLI coding super-framework using A...",
      "description": "Configuration file for the DRD project using Poetry. It defines project metadata, dependencies, development dependencies, build system, and CLI entry point. The project is a Python-based CLI tool named \"dravid\" with various functionalities for development assistance.",
      "exports": "None"
    },
    {
      "filename": "tests/cli/query/test_query_main.py",
      "type": "Python test file",
      "last_modified": "2024-07-16T23:24:47.780608",
      "content_preview": "import unittest from unittest.mock import patch, MagicMock, call import requests  from drd.cli.query...",
      "description": "Unit tests for the execute_dravid_command function in the drd.cli.query.main module. Tests cover various scenarios including debug mode, error handling, image processing, and API errors. The file uses unittest and mocking to simulate different conditions and verify the function's behavior.",
      "exports": "None"
    },
    {
      "filename": "tests/metadata/test_initializer.py",
      "type": "python",
      "last_modified": "2024-07-16T22:32:39.233581",
      "content_preview": "import unittest from unittest.mock import patch, MagicMock, mock_open import os import json from dat...",
      "description": "Unit tests for the project metadata initializer module. It tests the initialize_project_metadata function, mocking various dependencies and verifying the correct creation and saving of project metadata.",
      "exports": "None"
    },
    {
      "filename": "src/drd/cli/monitor/error_resolver.py",
      "type": "Python module",
      "last_modified": "2024-07-16T00:39:09.367806",
      "content_preview": "import traceback from ...api.dravid_api import call_dravid_api_with_pagination from ...api.dravid_pa...",
      "description": "This module handles error resolution for the monitoring functionality in the DRD project. It includes a function to handle errors using the Dravid API, parse the response, and apply suggested fixes with user confirmation. The module integrates with the project's metadata management, API communication, and command execution utilities.",
      "exports": "fun:monitoring_handle_error_with_dravid"
    },
    {
      "filename": "src/drd/prompts/monitor_error_resolution.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:38:24.751015",
      "content_preview": "# File: prompts/error_resolution_prompt.py  def get_error_resolution_prompt(error_type, error_messag...",
      "description": "This file contains a function to generate an error resolution prompt for the DRD project's monitoring system. It takes error details and project context as input and returns a formatted prompt for an AI assistant to provide error resolution steps.",
      "exports": "fun:get_error_resolution_prompt"
    },
    {
      "filename": "tests/utils/test_api_utils.py",
      "type": "test_file",
      "last_modified": "2024-07-16T22:21:47.445319",
      "content_preview": "import unittest from unittest.mock import patch, MagicMock import os import json import xml.etree.El...",
      "description": "This file contains unit tests for the api_utils module in the DRD project. It tests various API-related functions including getting API keys, making API calls, parsing responses, and handling pagination for both text and vision API calls. The tests cover error handling, mocking of external dependencies, and verification of expected behaviors.",
      "exports": "None"
    },
    {
      "filename": "tests/metadata/test_project_metadata.py",
      "type": "python",
      "last_modified": "2024-07-11T21:19:24.426312",
      "content_preview": "from src.drd.metadata.project_metadata import ProjectMetadataManager import unittest from unittest.m...",
      "description": "Unit tests for the ProjectMetadataManager class in the DRD project. Tests cover various functionalities including loading and saving metadata, updating file metadata, getting project context, updating dev server info, and updating metadata from files.",
      "exports": "None"
    },
    {
      "filename": "src/drd/cli/monitor/server_monitor.py",
      "type": "Python",
      "last_modified": "2024-07-16T23:43:15.733646",
      "content_preview": "import click import time import re import os from typing import Dict, Callable from ...metadata.proj...",
      "description": "This file contains the DevServerMonitor class and run_dev_server_with_monitoring function for monitoring and managing a development server. It handles server output, error detection, and server restarts. The class includes methods for starting, stopping, and restarting the server, as well as handling user input. The file is part of the DRD project's CLI monitor functionality.",
      "exports": "fun:run_dev_server_with_monitoring,class:DevServerMonitor"
    },
    {
      "filename": "src/drd/api/dravid_api.py",
      "type": "Python module",
      "last_modified": "2024-07-16T20:27:33.872384",
      "content_preview": "from ..utils.api_utils import call_dravid_api_with_pagination, call_dravid_vision_api_with_paginatio...",
      "description": "This module contains functions for interacting with the Dravid API, including streaming responses, parsing XML, and calling different API endpoints. It provides functionality for both regular and vision-based API calls, as well as parsing and processing the responses. The module integrates with other utility functions from the project for API calls, error handling, and pretty printing.",
      "exports": "fun:stream_dravid_api,fun:parse_streaming_xml,fun:parse_step,fun:call_dravid_api,fun:call_dravid_vision_api"
    },
    {
      "filename": "conftest.py",
      "type": "Python Test Configuration",
      "last_modified": "2024-07-13T21:54:11.877182",
      "content_preview": "import sys import os  # Add the project root to the Python path sys.path.insert(0, os.path.abspath(o...",
      "description": "This file configures the Python test environment for the DRD project. It adds the project root to the Python path, ensuring that modules can be imported correctly during testing. This is crucial for maintaining a consistent testing environment across the project.",
      "exports": "None"
    },
    {
      "filename": "tests/utils/test_file_utils.py",
      "type": "Python test file",
      "last_modified": "2024-07-16T22:15:33.490511",
      "content_preview": "import unittest from unittest.mock import patch, mock_open import os import xml.etree.ElementTree as...",
      "description": "This file contains unit tests for various file utility functions in the DRD project. It tests functions like parse_file_list_response, get_file_content, parse_find_file_response, and fetch_project_guidelines. The tests use mocking to simulate file operations and XML parsing, ensuring the robustness of file handling utilities.",
      "exports": "None"
    },
    {
      "filename": "src/drd/__init__.py",
      "type": "Python module",
      "last_modified": "2024-07-11T19:41:20.725604",
      "content_preview": "from .cli.main import dravid_cli from .cli.query import execute_dravid_command from .metadata.initia...",
      "description": "Main module for the DRD project, importing and exposing key functions from various submodules. It includes CLI functionality, metadata initialization and updating, and command execution capabilities.",
      "exports": "fun:dravid_cli,fun:execute_dravid_command,fun:initialize_project_metadata,fun:update_metadata_with_dravid"
    },
    {
      "filename": "src/drd/cli/monitor/__init__.py",
      "type": "Python module",
      "last_modified": "2024-07-14T13:53:19.012436",
      "content_preview": "from .server_monitor import run_dev_server_with_monitoring  __all__ = ['run_dev_server_with_monitori...",
      "description": "Initialization file for the monitor module within the DRD CLI. It exports the run_dev_server_with_monitoring function from the server_monitor module, making it available for use in other parts of the project. This file is part of the monitoring functionality, likely used for overseeing and managing the development server.",
      "exports": "fun:run_dev_server_with_monitoring"
    },
    {
      "filename": "src/drd/api/__init__.py",
      "type": "Python module",
      "last_modified": "2024-07-12T16:15:14.091799",
      "content_preview": "from .dravid_api import call_dravid_api_with_pagination, call_dravid_vision_api_with_pagination from...",
      "description": "This is the __init__.py file for the api module in the DRD project. It imports and re-exports key functions from the dravid_api and dravid_parser modules, making them easily accessible when importing from the api package. These functions are related to calling the Dravid API with pagination support and parsing the responses, including XML extraction.",
      "exports": "fun:call_dravid_api_with_pagination,fun:call_dravid_vision_api_with_pagination,fun:parse_dravid_response,fun:extract_and_parse_xml"
    },
    {
      "filename": "tests/utils/test_step_executor.py",
      "type": "Python unit test file",
      "last_modified": "2024-07-16T20:55:44.683408",
      "content_preview": "import unittest from unittest.mock import patch, mock_open, MagicMock import os import json import s...",
      "description": "Unit tests for the Executor class in the step_executor module. Tests cover various file operations, command execution, JSON handling, and environment variable management. The tests use unittest framework with mocking to simulate file system operations and subprocess calls.",
      "exports": "None"
    },
    {
      "filename": "src/drd/main.py",
      "type": "Python",
      "last_modified": "2024-07-11T19:23:55.796604",
      "content_preview": "from .cli.main import dravid_cli  if __name__ == \"__main__\":     dravid_cli() ",
      "description": "Main entry point for the DRD CLI tool. It imports and calls the dravid_cli function from the cli.main module when the script is run directly. This file serves as the starting point for the DRD application, initiating the command-line interface.",
      "exports": "None"
    },
    {
      "filename": "src/drd/cli/monitor/error_handlers.py",
      "type": "Python module",
      "last_modified": "2024-07-14T13:53:19.012684",
      "content_preview": "import re from .error_resolver import monitoring_handle_error_with_dravid   def handle_module_not_fo...",
      "description": "This module contains error handling functions for the DRD project's monitoring feature. It includes handlers for module not found errors, syntax errors, and general errors. These handlers use the monitoring_handle_error_with_dravid function from the error_resolver module to process and potentially resolve errors.",
      "exports": "fun:handle_module_not_found,fun:handle_syntax_error,fun:handle_general_error"
    },
    {
      "filename": "src/drd/api/dravid_parser.py",
      "type": "Python module",
      "last_modified": "2024-07-16T00:34:57.484695",
      "content_preview": "import xml.etree.ElementTree as ET from typing import List, Dict, Any import re import click from py...",
      "description": "This module contains functions for parsing and processing XML responses from the Dravid API. It includes utilities for extracting XML content, escaping special characters, parsing the XML structure, and pretty-printing the parsed commands. The module is part of the DRD project's API handling components.",
      "exports": "fun:extract_outermost_xml,fun:escape_nested_cdata,fun:escape_special_characters,fun:extract_and_parse_xml,fun:parse_dravid_response,fun:pretty_print_commands"
    },
    {
      "filename": "project_guidelines.txt",
      "type": "text",
      "last_modified": "2024-07-12T11:12:24.597437",
      "content_preview": "1. Dont use doc string. 2. If a function has more than 1 helper functions that is only tied to them,...",
      "description": "Project guidelines document outlining coding standards and practices for the DRD project. It specifies not to use docstrings and to separate functions with multiple helpers into separate files. Also describes the role of the project context maintainer.",
      "exports": "None"
    },
    {
      "filename": "tests/utils/test_pretty_print_stream.py",
      "type": "Python Test File",
      "last_modified": "2024-07-16T20:45:12.933829",
      "content_preview": "from drd.utils.pretty_print_stream import stream_and_print_commands   def test_basic_explanation(cap...",
      "description": "This file contains unit tests for the pretty_print_stream module in the DRD project. It tests various scenarios of the stream_and_print_commands function, including handling of XML-like chunks, different types of commands (shell, file operations), and various edge cases such as split tags and large content. The tests cover explanation printing, shell command handling, file operations, and CDATA content processing.",
      "exports": "None"
    },
    {
      "filename": "src/drd/utils/__init__.py",
      "type": "Python module",
      "last_modified": "2024-07-16T21:00:02.516963",
      "content_preview": "from .utils import (     print_error,     print_success,     print_info,     print_step,     print_d...",
      "description": "Initializer module for the utils package in the DRD project. It imports and re-exports various utility functions from submodules, including printing functions, API call utilities, and a loader functionality. This module serves as a centralized access point for commonly used utilities across the project.",
      "exports": "fun:print_error,fun:print_success,fun:print_info,fun:print_step,fun:print_debug,fun:print_warning,fun:call_dravid_api_with_pagination,fun:call_dravid_vision_api_with_pagination,class:Loader,fun:run_with_loader"
    },
    {
      "filename": "src/drd/cli/query/__init__.py",
      "type": "Python module",
      "last_modified": "2024-07-16T00:57:47.212583",
      "content_preview": "from .main import execute_dravid_command from .file_operations import get_files_to_modify from .imag...",
      "description": "Initialization file for the query module within the DRD CLI tool. It imports and exports key functions from submodules related to executing Dravid commands, file operations, and image handling.",
      "exports": "fun:execute_dravid_command,fun:get_files_to_modify,fun:handle_image_query"
    },
    {
      "filename": "src/drd/prompts/error_resolution_prompt.py",
      "type": "Python",
      "last_modified": "2024-07-16T11:37:57.364070",
      "content_preview": "# File: prompts/error_resolution_prompts.py  def get_error_resolution_prompt(previous_context, cmd, ...",
      "description": "This file contains a function to generate an error resolution prompt for an AI assistant. It includes detailed instructions and guidelines for analyzing errors, providing resolution steps, and formatting the response in XML. The prompt includes context about the error, project details, and specific instructions for various scenarios.",
      "exports": "fun:get_error_resolution_prompt"
    },
    {
      "filename": "src/drd/metadata/project_metadata.py",
      "type": "py",
      "last_modified": "2024-07-16T14:53:13.731392",
      "content_preview": "import json import os from datetime import datetime   class ProjectMetadataManager:     def __init__...",
      "description": "This file contains the ProjectMetadataManager class, which is responsible for managing project metadata. It handles loading, saving, and updating metadata for the project and individual files. The class provides methods for updating file metadata, removing file metadata, getting file metadata, updating dev server information, and retrieving project context. It plays a crucial role in maintaining the project's metadata for use by AI coding assistants.",
      "exports": "class:ProjectMetadataManager"
    },
    {
      "filename": "tests/cli/monitor/test_error_handlers.py",
      "type": "Python test file",
      "last_modified": "2024-07-16T23:49:25.430314",
      "content_preview": "",
      "description": "This file contains unit tests for error handlers in the DRD CLI monitor module. It likely tests various error handling scenarios and functions related to error detection and resolution in the development server monitoring process.",
      "exports": "None"
    },
    {
      "filename": "src/drd/utils/pretty_print_stream.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:34:57.485973",
      "content_preview": "import re import click   def pretty_print_xml_stream(chunk, state):      state['buffer'] += chunk   ...",
      "description": "This file contains utility functions for pretty-printing XML-formatted streams of data. It includes functionality to process and display different types of content such as explanations, file operations, and shell commands. The main function 'stream_and_print_commands' processes chunks of XML data and uses the 'pretty_print_xml_stream' function to handle the parsing and displaying of content.",
      "exports": "fun:pretty_print_xml_stream,fun:stream_and_print_commands"
    },
    {
      "filename": "src/drd/cli/query/image_handler.py",
      "type": "Python module",
      "last_modified": "2024-07-12T16:15:26.159325",
      "content_preview": "from ...api.dravid_api import call_dravid_vision_api_with_pagination   def handle_image_query(query,...",
      "description": "This module handles image queries by interfacing with the Dravid Vision API. It provides a function to process image-based queries with optional instruction prompts, utilizing pagination for the API calls. This is part of the query functionality in the DRD CLI tool, specifically dealing with image-related operations.",
      "exports": "fun:handle_image_query"
    },
    {
      "filename": "src/drd/metadata/__init__.py",
      "type": "Python module",
      "last_modified": "2024-07-11T19:23:55.796851",
      "content_preview": "from .initializer import initialize_project_metadata from .updater import update_metadata_with_dravi...",
      "description": "This is the __init__.py file for the metadata package in the DRD project. It imports and re-exports key functions and classes from the metadata submodules, including initializer, updater, and project_metadata. This file serves as the main entry point for accessing metadata-related functionality in the DRD project.",
      "exports": "fun:initialize_project_metadata,fun:update_metadata_with_dravid,class:ProjectMetadataManager"
    },
    {
      "filename": "tests/cli/monitor/test_error_resolvers.py",
      "type": "python_test_file",
      "last_modified": "2024-07-16T23:49:07.991797",
      "content_preview": "import unittest from unittest.mock import patch, MagicMock from drd.cli.monitor.error_resolver impor...",
      "description": "Unit tests for the error resolver functionality in the DRD project's monitoring system. It tests the 'monitoring_handle_error_with_dravid' function, covering scenarios where fixes are applied or rejected, and handling parse errors. The tests use mocking to simulate API calls, response parsing, and user inputs.",
      "exports": "None"
    },
    {
      "filename": "src/drd/utils/step_executor.py",
      "type": "Python module",
      "last_modified": "2024-07-16T20:55:28.721270",
      "content_preview": "import subprocess import os import json import click from colorama import Fore, Style import time im...",
      "description": "This file contains the Executor class, which is responsible for safely executing shell commands and performing file operations within the DRD project. It includes methods for checking command safety, executing shell commands, handling file operations (create, update, delete), parsing JSON, and retrieving folder structure. The class also manages environment variables and handles source commands.",
      "exports": "class:Executor"
    },
    {
      "filename": "src/drd/cli/query/main.py",
      "type": "Python module",
      "last_modified": "2024-07-16T21:00:36.926718",
      "content_preview": "import click from ...api.dravid_api import stream_dravid_api, call_dravid_vision_api from ...api.dra...",
      "description": "Main query handling module for the DRD CLI tool. It processes user queries, interacts with the Dravid API, handles image queries, executes commands, and manages project metadata. The module includes error handling and debugging features.",
      "exports": "fun:execute_dravid_command"
    },
    {
      "filename": "src/drd/metadata/updater.py",
      "type": "Python module",
      "last_modified": "2024-07-16T19:47:01.894172",
      "content_preview": "import os from ..api.dravid_api import call_dravid_api_with_pagination from ..api.dravid_parser impo...",
      "description": "This module handles updating project metadata based on a provided description. It uses the Dravid API to determine which files need updating, processes each file, and updates or removes metadata accordingly. Key functionalities include parsing API responses, handling file operations, and managing project metadata through the ProjectMetadataManager.",
      "exports": "fun:update_metadata_with_dravid"
    },
    {
      "filename": "tests/cli/monitor/test_dev_server_monitor.py",
      "type": "test_file",
      "last_modified": "2024-07-16T23:47:46.425295",
      "content_preview": "import unittest from unittest.mock import patch, MagicMock, call import threading import queue impor...",
      "description": "Unit tests for the DevServerMonitor class and run_dev_server_with_monitoring function in the server_monitor module. Tests cover starting the monitor with custom commands, restarting the server, stopping the monitor, and running the dev server with monitoring. Uses unittest and mock objects to simulate server behavior and test error handling.",
      "exports": "None"
    },
    {
      "filename": "src/drd/utils/utils.py",
      "type": "Python utility module",
      "last_modified": "2024-07-16T21:00:49.511265",
      "content_preview": "import click from colorama import Fore, Style import json import os  METADATA_FILE = 'drd.json'   de...",
      "description": "This file contains utility functions for colorized console output in the DRD project. It provides functions for printing error, success, info, warning, debug messages, and step progress. The file uses the click and colorama libraries for enhanced console output formatting.",
      "exports": "fun:print_error,fun:print_success,fun:print_info,fun:print_warning,fun:print_debug,fun:print_step,var:METADATA_FILE"
    },
    {
      "filename": "src/drd/cli/query/file_operations.py",
      "type": "Python module",
      "last_modified": "2024-07-16T00:47:09.962574",
      "content_preview": "import os from ...api import call_dravid_api_with_pagination from ...utils import print_error, print...",
      "description": "This module contains functions for file operations within the DRD project. It includes functionality to get files to modify based on a query and to find files using the Dravid API. The module interacts with project metadata, uses prompts for API calls, and handles file parsing and error reporting.",
      "exports": "fun:get_files_to_modify,fun:find_file_with_dravid"
    },
    {
      "filename": "src/drd/metadata/initializer.py",
      "type": "Python Module",
      "last_modified": "2024-07-16T20:28:27.169007",
      "content_preview": "import os import json from datetime import datetime import asyncio from ..api.dravid_api import call...",
      "description": "This file contains the implementation for initializing project metadata. It includes functions to gather project information, process files, and create a structured metadata object. The module interacts with the Dravid API, handles file operations, and manages rate limiting for API calls. It's a core component of the DRD project's metadata management system.",
      "exports": "fun:initialize_project_metadata,fun:initialize_project_metadata_sync"
    },
    {
      "filename": "tests/cli/query/test_file_operations.py",
      "type": "unit_test",
      "last_modified": "2024-07-16T23:09:32.384164",
      "content_preview": "import unittest from unittest.mock import patch, MagicMock import os  from drd.cli.query.file_operat...",
      "description": "Unit tests for file operations in the DRD project's CLI query module. Tests cover functions for getting files to modify and finding files with Dravid API assistance. Includes mocking of API calls, file system operations, and logging functions.",
      "exports": "None"
    },
    {
      "filename": "src/drd/utils/loader.py",
      "type": "Python module",
      "last_modified": "2024-07-16T20:26:52.100545",
      "content_preview": "import click import time import threading   class Loader:     def __init__(self, message=\"Processing...",
      "description": "This module provides a Loader class and a run_with_loader function for creating loading animations during long-running processes. It's part of the DRD project's utility modules, used to enhance user experience by providing visual feedback during operations.",
      "exports": "class:Loader,fun:run_with_loader"
    },
    {
      "filename": "src/drd/cli/query/dynamic_command_handler.py",
      "type": "Python Module",
      "last_modified": "2024-07-16T18:03:14.296409",
      "content_preview": "import traceback import click from ...utils.api_utils import call_dravid_api_with_pagination from .....",
      "description": "This module handles dynamic command execution for the DRD project. It contains functions for executing various types of commands (shell, file operations, metadata operations), error handling, and interacting with the Dravid API for error resolution. Key functionalities include command execution, error handling with Dravid API integration, and file metadata updates.",
      "exports": "fun:execute_commands,fun:handle_shell_command,fun:handle_file_operation,fun:handle_metadata_operation,fun:update_file_metadata,fun:handle_error_with_dravid"
    },
    {
      "filename": "src/drd/metadata/rate_limit_handler.py",
      "type": "Python Module",
      "last_modified": "2024-07-16T12:54:54.244989",
      "content_preview": "import asyncio import time from ..api.dravid_api import call_dravid_api_with_pagination from ..api.d...",
      "description": "This module implements a rate limiter for API calls in the DRD project. It includes a RateLimiter class to manage concurrent requests and enforce rate limits, as well as functions for processing file metadata using the Dravid API. The module handles asynchronous operations and integrates with other project components like API utilities, parsers, and prompts.",
      "exports": "class:RateLimiter,fun:process_single_file,fun:process_files,var:MAX_CONCURRENT_REQUESTS,var:MAX_CALLS_PER_MINUTE,var:RATE_LIMIT_PERIOD,var:rate_limiter"
    },
    {
      "filename": "tests/cli/query/test_dynamic_command_handler.py",
      "type": "python_test",
      "last_modified": "2024-07-16T23:15:49.740207",
      "content_preview": "import unittest from unittest.mock import patch, MagicMock, call import xml.etree.ElementTree as ET ...",
      "description": "Unit tests for the dynamic_command_handler module in the DRD project. This file contains comprehensive tests for various functions including execute_commands, handle_shell_command, handle_file_operation, handle_metadata_operation, update_file_metadata, and handle_error_with_dravid. It uses unittest and mock objects to simulate different scenarios and verify the correct behavior of these functions.",
      "exports": "fun:TestDynamicCommandHandler"
    },
    {
      "filename": "src/drd/utils/file_utils.py",
      "type": "Python utility module",
      "last_modified": "2024-07-16T21:02:00.947652",
      "content_preview": "import os from ..api import extract_and_parse_xml from ..utils import print_error, print_info   def ...",
      "description": "This file contains utility functions for file operations within the DRD project. It includes functions for parsing XML responses from file-related API calls, reading file contents, and fetching project guidelines. The module interacts with the project's API and utilizes error handling and information printing utilities.",
      "exports": "fun:parse_file_list_response,fun:get_file_content,fun:parse_find_file_response,fun:fetch_project_guidelines"
    },
    {
      "filename": "src/drd/prompts/get_project_info_prompts.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:50:11.500143",
      "content_preview": "def get_project_info_prompt(folder_structure):     return f\"\"\" Current folder structure: {folder_str...",
      "description": "This file contains a function 'get_project_info_prompt' that generates a prompt for analyzing project structure and requesting information about the project. It's part of the DRD CLI tool's prompt generation system, used to gather project metadata.",
      "exports": "fun:get_project_info_prompt"
    },
    {
      "filename": "src/drd/metadata/common_utils.py",
      "type": "Python Module",
      "last_modified": "2024-07-16T22:47:04.554862",
      "content_preview": "import os import re from ..api.dravid_api import call_dravid_api_with_pagination from ..api.dravid_p...",
      "description": "This file contains utility functions for metadata handling in the DRD project. It includes functions for parsing .gitignore files, generating folder structures, and interacting with the Dravid API to generate file descriptions and suggestions. The module is part of the metadata management system and provides core functionality for file operations and project structure analysis.",
      "exports": "fun:parse_gitignore,fun:should_ignore,fun:get_folder_structure,fun:get_ignore_patterns,fun:generate_file_description,fun:find_file_with_dravid"
    },
    {
      "filename": "tests/cli/query/test_image_handler.py",
      "type": "test_file",
      "last_modified": "2024-07-16T23:11:55.011335",
      "content_preview": "import unittest from unittest.mock import patch  from drd.cli.query.image_handler import handle_imag...",
      "description": "Unit tests for the image_handler module in the DRD project. Tests the handle_image_query function with and without instruction prompts, using mock API calls to simulate vision API responses.",
      "exports": "None"
    }
  ],
  "dev_server": {
    "start_command": "poetry run python src/drd/main.py",
    "framework": "Custom CLI framework",
    "language": "Python"
  },
  "description": "DRD appears to be a Python-based CLI tool with various functionalities including file operations, API interactions, metadata handling, and error resolution. It likely involves some form of project management or development assistance, with features for monitoring, querying, and possibly AI-assisted operations (given the presence of prompts and API utilities). The project seems well-structured with separate modules for different functionalities and corresponding test files."
}