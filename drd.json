{
  "project_name": "drd",
  "last_updated": "2024-07-11T23:59:26.151371",
  "files": [
    {
      "filename": "conftest.py",
      "type": "py",
      "last_modified": "2024-07-11T20:58:35.120313",
      "content_preview": "import sys import os  # Add the project root to the Python path sys.path.insert(0, os.path.abspath(o",
      "description": "Test configuration file setting up Python path for project-wide test discovery and execution."
    },
    {
      "filename": "pyproject.toml",
      "type": "toml",
      "last_modified": "2024-07-11T23:59:07.719392",
      "content_preview": "[tool.poetry] name = \"dravid\" version = \"0.4.0\" description = \"A CLI coding super-framework using AI",
      "description": "Python project config file for 'dravid', a CLI coding framework using AI, version 0.4.0."
    },
    {
      "filename": "README.md",
      "type": "md",
      "last_modified": "2024-07-07T15:54:54.902838",
      "content_preview": "",
      "description": "Project documentation with setup instructions, usage guide, and contributor guidelines."
    },
    {
      "filename": "CONTRIBUTING.md",
      "type": "md",
      "last_modified": "2024-07-07T15:55:38.012959",
      "content_preview": "",
      "description": "Contribution guidelines for developers, outlining code standards and submission process."
    },
    {
      "filename": "poetry.lock",
      "type": "lock",
      "last_modified": "2024-07-11T00:19:50.654679",
      "content_preview": "# This file is automatically @generated by Poetry 1.8.3 and should not be changed by hand.  [[packag",
      "description": "Poetry lock file containing package dependencies and versions for a Python project."
    },
    {
      "filename": "gui.spec",
      "type": "spec",
      "last_modified": "2024-07-10T11:07:50.874883",
      "content_preview": "# -*- mode: python ; coding: utf-8 -*-   a = Analysis(     ['src/drd/gui.py'],     pathex=[],     bi",
      "description": "Python spec file for PyInstaller, configuring GUI application build settings"
    },
    {
      "filename": "run_tests/__init__.py",
      "type": "py",
      "last_modified": "2024-07-11T20:47:27.745747",
      "content_preview": "import pytest import sys   def main():     sys.exit(pytest.main([\"-v\", \"src\"]))   if __name__ == \"__",
      "description": "Python script that runs pytest on the 'src' directory with verbose output."
    },
    {
      "filename": "src/drd/__init__.py",
      "type": "py",
      "last_modified": "2024-07-11T19:41:20.725604",
      "content_preview": "from .cli.main import dravid_cli from .cli.query import execute_dravid_command from .metadata.initia",
      "description": "Python module initializing Dravid CLI, query execution, and metadata components"
    },
    {
      "filename": "src/drd/main.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.796604",
      "content_preview": "from .cli.main import dravid_cli  if __name__ == \"__main__\":     dravid_cli() ",
      "description": "Python script defining main entry point for Dravid CLI application."
    },
    {
      "filename": "src/drd/utils/__init__.py",
      "type": "py",
      "last_modified": "2024-07-11T23:25:36.839613",
      "content_preview": "from .utils import (     get_project_context,     print_error,     print_success,     print_info,   ",
      "description": "Utility module with functions for project context, printing messages, and other helper tools."
    },
    {
      "filename": "src/drd/utils/step_executor.py",
      "type": "py",
      "last_modified": "2024-07-11T19:27:58.891259",
      "content_preview": "import subprocess import os import json import click from colorama import Fore, Style import time fr",
      "description": "Python utility module for executing steps, handling subprocess, color output, and timing functionali"
    },
    {
      "filename": "src/drd/utils/utils.py",
      "type": "py",
      "last_modified": "2024-07-11T23:25:03.123933",
      "content_preview": "import click from colorama import Fore, Style import json import os  METADATA_FILE = 'drd.json'   de",
      "description": "Utility module with functions for CLI color output, JSON handling, and metadata operations."
    },
    {
      "filename": "src/drd/utils/description_generator.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.801357",
      "content_preview": "import requests import os   def generate_description(filename, content):     api_key = os.getenv('CL",
      "description": "Python utility for generating file descriptions using an API with environment variable for key."
    },
    {
      "filename": "src/drd/utils/api_utils.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.801092",
      "content_preview": "import requests import os import json import base64 from ..api.dravid_parser import extract_and_pars",
      "description": "Python utility module for API interactions, including requests, parsing, and data handling."
    },
    {
      "filename": "src/drd/cli/monitor.py",
      "type": "py",
      "last_modified": "2024-07-11T19:28:12.715252",
      "content_preview": "import click import time import re import os import traceback from typing import Dict, Callable from",
      "description": "Python CLI module for monitoring and processing file changes with click commands."
    },
    {
      "filename": "src/drd/cli/__init__.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.795110",
      "content_preview": "from .main import dravid_cli from .monitor import run_dev_server_with_monitoring  __all__ = ['dravid",
      "description": "Python module defining CLI functionality for Dravid, including main CLI and monitoring tools."
    },
    {
      "filename": "src/drd/cli/main.py",
      "type": "py",
      "last_modified": "2024-07-11T19:32:42.525171",
      "content_preview": "import click import os from dotenv import load_dotenv from .query import execute_dravid_command from",
      "description": "Python CLI script for executing Dravid commands, using Click and environment variables."
    },
    {
      "filename": "src/drd/cli/tests/test_monitor.py",
      "type": "py",
      "last_modified": "2024-07-11T21:14:30.460248",
      "content_preview": "from src.drd.cli.monitor import DevServerMonitor, run_dev_server_with_monitoring, handle_module_not_",
      "description": "Python test file for DevServerMonitor class and related functions in CLI monitoring module"
    },
    {
      "filename": "src/drd/cli/query/__init__.py",
      "type": "py",
      "last_modified": "2024-07-11T19:40:54.845984",
      "content_preview": "from .main import execute_dravid_command from .file_operations import get_files_to_modify, get_file_",
      "description": "Python module defining CLI query operations for Dravid, including file handling and command executio"
    },
    {
      "filename": "src/drd/cli/query/image_handler.py",
      "type": "py",
      "last_modified": "2024-07-11T21:09:22.092552",
      "content_preview": "from ...api.dravid_api import call_dravid_vision_api   def handle_image_query(query, image_path, ins",
      "description": "Python module for handling image queries using Dravid Vision API in a CLI application."
    },
    {
      "filename": "src/drd/cli/query/main.py",
      "type": "py",
      "last_modified": "2024-07-11T23:29:12.740987",
      "content_preview": "import click from ...api.dravid_api import call_dravid_api from ...api.dravid_parser import parse_dr",
      "description": "Python CLI module for querying and parsing data using Dravid API and parser"
    },
    {
      "filename": "src/drd/cli/query/file_operations.py",
      "type": "py",
      "last_modified": "2024-07-11T19:31:30.699450",
      "content_preview": "import os from ...api import call_dravid_api, extract_and_parse_xml from ...utils import print_error",
      "description": "Python module for file operations in a CLI, including API calls and XML parsing."
    },
    {
      "filename": "src/drd/cli/query/tests/test_file_operations.py",
      "type": "py",
      "last_modified": "2024-07-11T21:05:52.324785",
      "content_preview": "from src.drd.cli.query.file_operations import get_files_to_modify, get_file_content, find_file_with_",
      "description": "Tests for file operations functions in the DRD CLI query module"
    },
    {
      "filename": "src/drd/cli/query/tests/test_image_handler.py",
      "type": "py",
      "last_modified": "2024-07-11T21:08:44.260794",
      "content_preview": "from src.drd.cli.query.image_handler import handle_image_query import unittest from unittest.mock im",
      "description": "Python unit test file for image query handling functionality in a CLI application"
    },
    {
      "filename": "src/drd/prompts/__init__.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.797924",
      "content_preview": "from .claude_instructions import get_instruction_prompt from .error_handling import handle_error_wit",
      "description": "Python module initializing imports for Claude instructions and error handling functions."
    },
    {
      "filename": "src/drd/prompts/error_handling.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.798300",
      "content_preview": "import traceback import click from ..utils.api_utils import call_dravid_api from ..api.dravid_parser",
      "description": "Python script for error handling in DRD project, using click and API utils for Dravid API interactio"
    },
    {
      "filename": "src/drd/prompts/claude_instructions.py",
      "type": "py",
      "last_modified": "2024-07-11T11:44:56.550515",
      "content_preview": "def get_instruction_prompt():     return \"\"\"     You are an advanced project setup assistant capable",
      "description": "Python module defining an instruction prompt for an AI project setup assistant."
    },
    {
      "filename": "src/drd/prompts/file_operations.py",
      "type": "py",
      "last_modified": "2024-07-07T20:39:54.182355",
      "content_preview": "def get_file_identification_prompt():     return \"\"\"You are a file identification assistant. Based o",
      "description": "Python module with functions to generate prompts for file identification and description tasks."
    },
    {
      "filename": "src/drd/api/dravid_api.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.794600",
      "content_preview": "from ..utils.api_utils import call_dravid_api, call_dravid_vision_api ",
      "description": "Python module for interacting with Dravid API, including vision-related functionality."
    },
    {
      "filename": "src/drd/api/__init__.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.794374",
      "content_preview": "from .dravid_api import call_dravid_api, call_dravid_vision_api from .dravid_parser import parse_dra",
      "description": "API module initializing Dravid API functions and parser for DRA data processing."
    },
    {
      "filename": "src/drd/api/dravid_parser.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.794843",
      "content_preview": "import xml.etree.ElementTree as ET from typing import List, Dict, Any import re   def extract_and_pa",
      "description": "Python script for parsing XML data, extracting information, and processing it using various function"
    },
    {
      "filename": "src/drd/api/tests/test_dravid_parser.py",
      "type": "py",
      "last_modified": "2024-07-11T20:45:24.990520",
      "content_preview": "import unittest from src.drd.api.dravid_parser import extract_and_parse_xml, parse_dravid_response  ",
      "description": "Unit tests for the Dravid parser, testing XML extraction and response parsing functionality."
    },
    {
      "filename": "src/drd/metadata/project_metadata.py",
      "type": "py",
      "last_modified": "2024-07-11T21:19:21.325218",
      "content_preview": "import json import os from datetime import datetime   class ProjectMetadataManager:     def __init__",
      "description": "Python module for managing project metadata, including JSON operations and timestamp handling."
    },
    {
      "filename": "src/drd/metadata/__init__.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.796851",
      "content_preview": "from .initializer import initialize_project_metadata from .updater import update_metadata_with_dravi",
      "description": "Python module defining metadata initialization and update functions for a project."
    },
    {
      "filename": "src/drd/metadata/updater.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.797662",
      "content_preview": "import os from ..api.dravid_api import call_dravid_api from ..api.dravid_parser import extract_and_p",
      "description": "Python module for updating metadata using Dravid API and parsing extracted data"
    },
    {
      "filename": "src/drd/metadata/initializer.py",
      "type": "py",
      "last_modified": "2024-07-11T23:57:47.821440",
      "content_preview": "import os import re import json from datetime import datetime from ..api.dravid_api import call_drav",
      "description": "Python module for initializing metadata, handling API calls, and processing file information."
    },
    {
      "filename": "src/drd/metadata/tests/test_initializer.py",
      "type": "py",
      "last_modified": "2024-07-11T21:20:52.523496",
      "content_preview": "from src.drd.metadata.initializer import initialize_project_metadata import unittest from unittest.m",
      "description": "Python unit test file for initializing project metadata in a data-related application."
    },
    {
      "filename": "src/drd/metadata/tests/test_project_metadata.py",
      "type": "py",
      "last_modified": "2024-07-11T21:19:24.426312",
      "content_preview": "from src.drd.metadata.project_metadata import ProjectMetadataManager import unittest from unittest.m",
      "description": "Python unit test file for ProjectMetadataManager class in DRD metadata module"
    }
  ],
  "dev_server": {
    "start_command": "python src/drd/main.py",
    "framework": "None specifically identified",
    "language": "Python"
  },
  "description": "This project, named \"drd\", appears to be a Python-based application with both CLI and API components. It includes utilities for step execution, description generation, and API interactions. The project structure suggests it deals with image handling, file operations, and possibly integrates with an external API (Dravid API). It also includes metadata management and updating capabilities. The presence of test files indicates a focus on test-driven development. The project likely involves some form of data processing or automation, potentially related to image analysis or file management tasks."
}