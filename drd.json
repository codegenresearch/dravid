{
  "project_name": "drd",
  "last_updated": "2024-07-16T20:30:42.897684",
  "files": [
    {
      "filename": "CONTRIBUTING.md",
      "type": "markdown",
      "last_modified": "2024-07-12T11:35:06.832838",
      "content_preview": "# Contributing to Dravid (DRD)  First off, thank you for considering contributing to Dravid! It's pe...",
      "description": "This is the CONTRIBUTING.md file for the Dravid (DRD) project. It provides guidelines for contributing to the project, including how to report bugs, suggest enhancements, and submit pull requests. The file also outlines the project's code of conduct, styleguides for Git commit messages, Python code, and documentation. It emphasizes the importance of clear communication, adherence to coding standards, and proper documentation. The file is crucial for maintaining project quality and fostering a collaborative development environment.",
      "exports": ""
    },
    {
      "filename": "src/drd/cli/commands.py",
      "type": "Python",
      "last_modified": "2024-07-16T12:34:47.387010",
      "content_preview": "import click import sys import os import asyncio from dotenv import load_dotenv from .query import e...",
      "description": "This file contains the main CLI logic for the DRD project. It defines the core functionality for handling various commands including query execution, metadata initialization and updates, version checking, and the 'ask' feature. It imports and utilizes functions from other modules within the project, demonstrating the interconnected nature of the CLI tool. The file also sets up error handling and environment variable loading.",
      "exports": "fun:handle_query_command,fun:dravid_cli_logic,var:VERSION"
    },
    {
      "filename": "src/drd/prompts/__init__.py",
      "type": "Python Module",
      "last_modified": "2024-07-16T11:40:40.664052",
      "content_preview": "from .instructions import get_instruction_prompt from .file_operations import get_file_identificatio...",
      "description": "This is the __init__.py file for the prompts package in the DRD project. It imports and exports specific functions from other modules within the package, making them available for use throughout the project. The exported functions are related to generating prompts for instructions, file identification, and file description, which are likely used in various CLI operations and API interactions within the DRD tool.",
      "exports": "fun:get_instruction_prompt,fun:get_file_identification_prompt,fun:get_file_description_prompt"
    },
    {
      "filename": "src/drd/metadata/tests/test_project_metadata.py",
      "type": "python",
      "last_modified": "2024-07-11T21:19:24.426312",
      "content_preview": "from src.drd.metadata.project_metadata import ProjectMetadataManager import unittest from unittest.m...",
      "description": "Unit tests for the ProjectMetadataManager class in the drd project. Tests cover loading and saving metadata, updating file metadata, getting project context, updating and retrieving dev server info, and updating metadata from files. Uses unittest framework with mocking for file operations and method calls.",
      "exports": "class:TestProjectMetadataManager"
    },
    {
      "filename": "poetry.lock",
      "type": "dependency_lock_file",
      "last_modified": "2024-07-16T00:34:57.483863",
      "content_preview": "# This file is automatically @generated by Poetry 1.8.3 and should not be changed by hand.  [[packag...",
      "description": "This is the Poetry lock file (poetry.lock) for the DRD project. It contains detailed information about the project's dependencies, including package names, versions, hashes, and Python version requirements. The file ensures reproducible builds by locking the versions of all dependencies and their sub-dependencies.",
      "exports": ""
    },
    {
      "filename": "src/drd/cli/monitor/error_resolver.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:39:09.367806",
      "content_preview": "import traceback from ...api.dravid_api import call_dravid_api_with_pagination from ...api.dravid_pa...",
      "description": "This file contains the error handling functionality for the monitoring feature of the DRD project. It includes a function to handle errors by communicating with the Dravid API, parsing the response, and applying suggested fixes. The file interacts with various project components such as API calls, response parsing, command execution, and user interaction.",
      "exports": "fun:monitoring_handle_error_with_dravid"
    },
    {
      "filename": "src/drd/prompts/metadata_update_prompts.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:51:48.086804",
      "content_preview": "# File: prompts/metadata_update_prompts.py  def get_file_suggestion_prompt(filename, project_context...",
      "description": "This file contains prompt generation functions for metadata updates in the DRD project. It includes functions to create prompts for file suggestions when a file is not found, and for identifying files that need metadata updates based on user descriptions. These functions are crucial for maintaining and updating project metadata.",
      "exports": "fun:get_file_suggestion_prompt,fun:get_files_to_update_prompt"
    },
    {
      "filename": "drd.json",
      "type": "JSON Configuration",
      "last_modified": "2024-07-16T12:42:30.364007",
      "content_preview": "{   \"project_name\": \"drd\",   \"last_updated\": \"2024-07-16T12:39:13.620677\",   \"files\": [     {       ...",
      "description": "This file (drd.json) is the main configuration and metadata file for the DRD (Dravid) project. It contains comprehensive information about the project structure, including details about all files in the project, their types, last modified dates, content previews, and descriptions. The file also includes project-wide settings such as the project name, last update timestamp, development server configuration, and an overall project description. This JSON file serves as a central repository for project metadata, which is likely used by various components of the DRD tool for context-aware operations, file management, and project analysis.",
      "exports": ""
    },
    {
      "filename": "src/drd/cli/monitor/server_monitor.py",
      "type": "Python",
      "last_modified": "2024-07-14T13:53:19.013361",
      "content_preview": "import click import time import re import os from typing import Dict, Callable from ...metadata.proj...",
      "description": "This file contains the DevServerMonitor class and related functionality for monitoring and managing a development server. It includes features for starting, stopping, and restarting the server, handling errors, and processing user input. The file is part of the CLI monitoring module in the DRD project.",
      "exports": "class:DevServerMonitor,fun:run_dev_server_with_monitoring"
    },
    {
      "filename": "src/drd/prompts/file_operations.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:45:44.675604",
      "content_preview": "def get_file_identification_prompt():     return \"\"\"You are a file identification assistant. Based o...",
      "description": "Contains prompt functions for file operations, including identification, description, modification, and file finding",
      "exports": "fun:get_file_identification_prompt,fun:get_file_description_prompt,fun:get_files_to_modify_prompt,fun:find_file_prompt"
    },
    {
      "filename": "run_tests/__init__.py",
      "type": "Python Module",
      "last_modified": "2024-07-11T20:47:27.745747",
      "content_preview": "import pytest import sys   def main():     sys.exit(pytest.main([\"-v\", \"src\"]))   if __name__ == \"__...",
      "description": "This is the __init__.py file for the run_tests directory. It contains a main function that runs pytest on the 'src' directory with verbose output. This module is likely used to execute all tests in the project from a central location.",
      "exports": "fun:main"
    },
    {
      "filename": "LICENSE",
      "type": "license",
      "last_modified": "2024-07-12T11:19:36.001693",
      "content_preview": "MIT License  Copyright (c) 2024 Vysakh Sreenivasan  Permission is hereby granted, free of charge, to...",
      "description": "MIT License file for the DRD project, granting permission to use, modify, and distribute the software under certain conditions. It includes copyright information for Vysakh Sreenivasan and standard MIT License terms.",
      "exports": ""
    },
    {
      "filename": "src/drd/cli/monitor/__init__.py",
      "type": "Python module",
      "last_modified": "2024-07-14T13:53:19.012436",
      "content_preview": "from .server_monitor import run_dev_server_with_monitoring  __all__ = ['run_dev_server_with_monitori...",
      "description": "This is the __init__.py file for the monitor module within the drd CLI. It imports and exposes the run_dev_server_with_monitoring function from the server_monitor module, making it available for use in other parts of the project. This module is part of the monitoring functionality in the DRD project, likely used for overseeing and managing development server operations.",
      "exports": "fun:run_dev_server_with_monitoring"
    },
    {
      "filename": "src/drd/prompts/file_metada_desc_prompts.py",
      "type": "Python",
      "last_modified": "2024-07-16T11:34:23.052269",
      "content_preview": "# File: prompts/file_metadata_prompts.py  def get_file_metadata_prompt(filename, content, project_co...",
      "description": "This file contains a function to generate a prompt for file metadata extraction. It's part of the prompts module in the DRD project, which is likely used for generating AI-assisted metadata for project files. The function takes into account the filename, content, project context, and folder structure to create a comprehensive prompt for metadata generation.",
      "exports": "fun:get_file_metadata_prompt"
    },
    {
      "filename": "src/drd/utils/tests/test_pretty_print_stream.py",
      "type": "test_file",
      "last_modified": "2024-07-16T00:34:57.486199",
      "content_preview": "import pytest from drd.utils.pretty_print_stream import stream_and_print_commands   def test_basic_e...",
      "description": "This file contains unit tests for the pretty_print_stream module in the DRD project. It tests various scenarios of parsing and printing XML-like chunks, including explanations, shell commands, and file operations. The tests cover different edge cases such as spacing, newlines, CDATA sections, and mixed content types.",
      "exports": ""
    },
    {
      "filename": "src/drd/cli/monitor/error_handlers.py",
      "type": "Python",
      "last_modified": "2024-07-14T13:53:19.012684",
      "content_preview": "import re from .error_resolver import monitoring_handle_error_with_dravid   def handle_module_not_fo...",
      "description": "This file contains error handling functions for the DRD project's monitoring system. It includes handlers for module not found errors, syntax errors, and general errors. Each handler uses the monitoring_handle_error_with_dravid function to process and resolve errors.",
      "exports": "fun:handle_module_not_found,fun:handle_syntax_error,fun:handle_general_error"
    },
    {
      "filename": "src/drd/prompts/monitor_error_resolution.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:38:24.751015",
      "content_preview": "# File: prompts/error_resolution_prompt.py  def get_error_resolution_prompt(error_type, error_messag...",
      "description": "This file contains a function to generate an error resolution prompt for the DRD project's monitoring system. It takes error details and project context as input and returns a formatted prompt for an AI assistant to analyze and provide steps to fix the error. The prompt includes instructions for the AI to respond in a specific XML format with explanations and steps for error resolution.",
      "exports": "fun:get_error_resolution_prompt"
    },
    {
      "filename": "pyproject.toml",
      "type": "pyproject.toml",
      "last_modified": "2024-07-16T00:34:57.484166",
      "content_preview": "[tool.poetry] name = \"dravid\" version = \"0.9.0\" description = \"A CLI coding super-framework using AI...",
      "description": "Configuration file for the DRD (Dravid) project using Poetry for dependency management. It specifies project metadata, dependencies, development dependencies, build system requirements, and defines scripts for running the CLI tool and tests. The project is a CLI coding super-framework using AI, with a version of 0.9.0 and various dependencies including click, requests, and Pillow.",
      "exports": ""
    },
    {
      "filename": "src/drd/__init__.py",
      "type": "Python module",
      "last_modified": "2024-07-11T19:41:20.725604",
      "content_preview": "from .cli.main import dravid_cli from .cli.query import execute_dravid_command from .metadata.initia...",
      "description": "Main module for the DRD project. It imports and exports key functions from various submodules, including CLI operations, metadata management, and command execution. This file acts as a central point for accessing core functionalities of the DRD tool.",
      "exports": "fun:dravid_cli,fun:execute_dravid_command,fun:initialize_project_metadata,fun:update_metadata_with_dravid"
    },
    {
      "filename": "src/drd/cli/query/__init__.py",
      "type": "Python module",
      "last_modified": "2024-07-16T00:57:47.212583",
      "content_preview": "from .main import execute_dravid_command from .file_operations import get_files_to_modify from .imag...",
      "description": "This is the __init__.py file for the query module within the DRD CLI tool. It exports key functions for executing Dravid commands, handling file operations, and processing image queries. These functions are likely used by other parts of the CLI to perform various query-related tasks.",
      "exports": "fun:execute_dravid_command,fun:get_files_to_modify,fun:handle_image_query"
    },
    {
      "filename": "src/drd/api/dravid_api.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:34:57.484397",
      "content_preview": "from ..utils.api_utils import call_dravid_api_with_pagination, call_dravid_vision_api_with_paginatio...",
      "description": "This file contains functions for interacting with the Dravid API, including streaming responses, parsing XML, and calling different API endpoints. It handles both regular and vision-based API calls, and includes utilities for debug logging and pretty printing of XML streams.",
      "exports": "fun:stream_dravid_api,fun:parse_streaming_xml,fun:parse_step,fun:call_dravid_api,fun:call_dravid_vision_api"
    },
    {
      "filename": "src/drd/main.py",
      "type": "Python",
      "last_modified": "2024-07-11T19:23:55.796604",
      "content_preview": "from .cli.main import dravid_cli  if __name__ == \"__main__\":     dravid_cli() ",
      "description": "Main entry point for the DRD (Dravid) CLI application. This file imports the dravid_cli function from the cli.main module and executes it when the script is run directly. It serves as the starting point for the CLI tool, connecting the user interface with the underlying functionality of the DRD project.",
      "exports": "None"
    },
    {
      "filename": "src/drd/api/__init__.py",
      "type": "Python module",
      "last_modified": "2024-07-12T16:15:14.091799",
      "content_preview": "from .dravid_api import call_dravid_api_with_pagination, call_dravid_vision_api_with_pagination from...",
      "description": "This is the __init__.py file for the api module in the drd project. It imports and re-exports key functions from dravid_api and dravid_parser modules, providing a centralized interface for API interactions and response parsing in the DRD project.",
      "exports": "fun:call_dravid_api_with_pagination,fun:call_dravid_vision_api_with_pagination,fun:parse_dravid_response,fun:extract_and_parse_xml"
    },
    {
      "filename": "project_guidelines.txt",
      "type": "text",
      "last_modified": "2024-07-12T11:12:24.597437",
      "content_preview": "1. Dont use doc string. 2. If a function has more than 1 helper functions that is only tied to them,...",
      "description": "Project guidelines for the DRD project, outlining coding standards and practices. It specifies not to use docstrings, to separate functions with multiple helpers into new files, and defines the role of the project context maintainer.",
      "exports": ""
    },
    {
      "filename": "src/drd/utils/__init__.py",
      "type": "Python Module",
      "last_modified": "2024-07-16T20:30:30.953548",
      "content_preview": "from .utils import (\n    get_project_context,\n    print_error,\n    print_success,\n    print_info,\n  ...",
      "description": "Initialization module for the utils package in the DRD project. It imports and re-exports various utility functions from submodules, including project context retrieval, console output formatting, API interaction utilities, and project guideline fetching. This module serves as a central point for accessing utility functions across the DRD application.",
      "exports": "fun:get_project_context,fun:print_error,fun:print_success,fun:print_info,fun:print_step,fun:print_debug,fun:print_warning,fun:call_dravid_api_with_pagination,fun:call_dravid_vision_api_with_pagination,fun:fetch_project_guidelines,class:Loader,fun:run_with_loader"
    },
    {
      "filename": "src/drd/cli/query/image_handler.py",
      "type": "Python",
      "last_modified": "2024-07-12T16:15:26.159325",
      "content_preview": "from ...api.dravid_api import call_dravid_vision_api_with_pagination   def handle_image_query(query,...",
      "description": "This file contains a function for handling image queries using the Dravid Vision API. It's part of the query module in the CLI component of the DRD project. The function integrates with the Dravid API to process image-based queries with optional instruction prompts.",
      "exports": "fun:handle_image_query"
    },
    {
      "filename": "src/drd/api/dravid_parser.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:34:57.484695",
      "content_preview": "import xml.etree.ElementTree as ET from typing import List, Dict, Any import re import click from py...",
      "description": "This file contains utility functions for parsing XML responses from the Dravid API. It includes functions for extracting and processing XML content, parsing the Dravid response into a structured format, and pretty printing the parsed commands. The file is part of the API handling module in the DRD project.",
      "exports": "fun:extract_outermost_xml,fun:escape_nested_cdata,fun:escape_special_characters,fun:extract_and_parse_xml,fun:parse_dravid_response,fun:pretty_print_commands"
    },
    {
      "filename": "src/drd/utils/pretty_print_stream.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:34:57.485973",
      "content_preview": "import re import click   def pretty_print_xml_stream(chunk, state):      state['buffer'] += chunk   ...",
      "description": "This file contains utility functions for pretty printing XML-like streams of data. It's part of the DRD project's utility module and is responsible for parsing and formatting structured output from API responses or other sources. The main function, pretty_print_xml_stream, processes chunks of XML-like data, extracting and formatting various elements such as explanations, file operations, and shell commands. The file also includes a stream_and_print_commands function that manages the state of the parsing process across multiple chunks.",
      "exports": "fun:pretty_print_xml_stream,fun:stream_and_print_commands"
    },
    {
      "filename": "src/drd/cli/query/main.py",
      "type": "Python",
      "last_modified": "2024-07-16T12:31:42.883661",
      "content_preview": "import click from ...api.dravid_api import stream_dravid_api, call_dravid_vision_api from ...api.dra...",
      "description": "This file contains the main query execution logic for the DRD CLI tool. It handles the process of executing Dravid commands, including API calls, error handling, file operations, and metadata management. The file integrates various components of the project, such as the Dravid API, project metadata, file operations, and error handling. It also includes debug options and supports image queries.",
      "exports": "fun:execute_dravid_command,fun:handle_command"
    },
    {
      "filename": "src/drd/api/tests/test_dravid_parser.py",
      "type": "Python test file",
      "last_modified": "2024-07-11T20:45:24.990520",
      "content_preview": "import unittest from src.drd.api.dravid_parser import extract_and_parse_xml, parse_dravid_response  ...",
      "description": "Unit tests for the dravid_parser module in the DRD project. It tests the extract_and_parse_xml and parse_dravid_response functions, ensuring proper XML parsing and response handling for the Dravid API integration.",
      "exports": "class:TestDravidParser"
    },
    {
      "filename": "src/drd/utils/step_executor.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:34:57.477500",
      "content_preview": "import subprocess import os import json import click from colorama import Fore, Style import time im...",
      "description": "This file contains the Executor class, which is responsible for safely executing shell commands, performing file operations, and managing the project's environment. It includes methods for command validation, file creation/update/deletion, JSON parsing and merging, folder structure retrieval, and environment variable management. The class implements security measures to prevent dangerous operations and maintains a controlled execution environment.",
      "exports": "class:Executor"
    },
    {
      "filename": "src/drd/cli/query/file_operations.py",
      "type": "Python module",
      "last_modified": "2024-07-16T00:47:09.962574",
      "content_preview": "import os from ...api import call_dravid_api_with_pagination from ...utils import print_error, print...",
      "description": "This module contains utility functions for file operations within the DRD project. It includes functions to get files to modify based on a query and to find files using the Dravid API. The module interacts with the project's metadata, API utilities, and prompts for file operations.",
      "exports": "fun:get_files_to_modify,fun:find_file_with_dravid"
    },
    {
      "filename": "src/drd/metadata/project_metadata.py",
      "type": "python",
      "last_modified": "2024-07-12T11:57:56.981605",
      "content_preview": "import json import os from datetime import datetime  class ProjectMetadataManager:     def __init__(...",
      "description": "Defines the ProjectMetadataManager class for managing project metadata. This class handles loading, saving, and updating project metadata, including file information and development server details. It provides methods for manipulating file metadata, retrieving project context, and managing development server information.",
      "exports": "class:ProjectMetadataManager"
    },
    {
      "filename": "src/drd/utils/utils.py",
      "type": "Python Utility Module",
      "last_modified": "2024-07-16T20:30:36.995967",
      "content_preview": "import click\nfrom colorama import Fore, Style\nimport json\nimport os\n\nMETADATA_FILE = 'drd.json'\n\n\nde...",
      "description": "This file contains utility functions for the DRD project, including color-coded console output, project context retrieval, file operations, and project guideline fetching. It provides essential tools for user interaction, error handling, and project management within the CLI application. The module defines constants for metadata file names and implements functions for formatted console output using colorama. It also includes functions for reading project metadata and guidelines from files.",
      "exports": "fun:get_project_context,fun:print_error,fun:print_success,fun:print_info,fun:print_warning,fun:print_debug,fun:print_step,fun:fetch_project_guidelines,var:METADATA_FILE"
    },
    {
      "filename": "src/drd/cli/query/tests/test_file_operations.py",
      "type": "test_file",
      "last_modified": "2024-07-11T21:05:52.324785",
      "content_preview": "from src.drd.cli.query.file_operations import get_files_to_modify, get_file_content, find_file_with_...",
      "description": "Unit tests for file operations in the DRD project. Tests cover functions for getting files to modify, retrieving file content, and finding files using the Dravid API. The test suite uses unittest and mocks to simulate API calls and file system operations.",
      "exports": "class:TestFileOperations"
    },
    {
      "filename": "src/drd/metadata/__init__.py",
      "type": "Python module",
      "last_modified": "2024-07-11T19:23:55.796851",
      "content_preview": "from .initializer import initialize_project_metadata from .updater import update_metadata_with_dravi...",
      "description": "Initialization module for the metadata package in the DRD project. It imports and re-exports key functions and classes related to project metadata management, including initialization, updating, and the main ProjectMetadataManager class.",
      "exports": "fun:initialize_project_metadata,fun:update_metadata_with_dravid,class:ProjectMetadataManager"
    },
    {
      "filename": "src/drd/utils/file_utils.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:46:12.764354",
      "content_preview": "import os from ..api import extract_and_parse_xml from ..utils import print_error   def parse_file_l...",
      "description": "This file contains utility functions for file operations, including parsing XML responses for file lists and individual file suggestions, as well as reading file contents. It interacts with the project's API module for XML parsing and utilizes error handling from the utils module.",
      "exports": "fun:parse_file_list_response,fun:get_file_content,fun:parse_find_file_response"
    },
    {
      "filename": "src/drd/cli/query/tests/test_image_handler.py",
      "type": "Python test file",
      "last_modified": "2024-07-11T21:08:44.260794",
      "content_preview": "from src.drd.cli.query.image_handler import handle_image_query import unittest from unittest.mock im...",
      "description": "This file contains unit tests for the image_handler module in the DRD project. It tests the handle_image_query function using mock objects to simulate API calls. The tests cover scenarios with and without instruction prompts, ensuring the function correctly interacts with the Dravid Vision API.",
      "exports": "class:TestImageHandler"
    },
    {
      "filename": "src/drd/metadata/updater.py",
      "type": "Python Module",
      "last_modified": "2024-07-16T00:52:11.953961",
      "content_preview": "import os from ..api.dravid_api import call_dravid_api_with_pagination from ..api.dravid_parser impo...",
      "description": "This module handles the updating of project metadata using the Dravid API. It includes functions for finding files, updating metadata based on project descriptions, and processing files for metadata updates or removals. The module interacts with the ProjectMetadataManager, uses utility functions for folder structure and file operations, and leverages prompts for generating API queries. It's a key component in maintaining up-to-date metadata for the DRD project.",
      "exports": "fun:find_file_with_dravid,fun:update_metadata_with_dravid"
    },
    {
      "filename": "src/drd/metadata/tests/test_initializer.py",
      "type": "Python test file",
      "last_modified": "2024-07-11T21:20:52.523496",
      "content_preview": "from src.drd.metadata.initializer import initialize_project_metadata import unittest from unittest.m...",
      "description": "Unit tests for the initialize_project_metadata function in the metadata initializer module. It tests the creation of new project metadata, updating existing metadata, and handling file creation errors. The tests use mocking to simulate file operations and JSON handling.",
      "exports": "class:TestMetadataInitializer"
    },
    {
      "filename": "src/drd/utils/api_utils.py",
      "type": "Python module",
      "last_modified": "2024-07-16T00:34:57.485763",
      "content_preview": "import requests import mimetypes import os import json import base64 from typing import Dict, Any, O...",
      "description": "This file contains utility functions for making API calls to the Claude AI model. It includes functions for pagination, handling both text and image inputs, and streaming responses. The module also handles API authentication, response parsing, and error handling. It's part of the DRD project's API interaction layer.",
      "exports": "fun:get_api_key,fun:get_headers,fun:make_api_call,fun:parse_response,fun:call_dravid_api_with_pagination,fun:call_dravid_vision_api_with_pagination,fun:stream_claude_response,fun:parse_paginated_response,var:API_URL,var:MODEL,var:MAX_TOKENS"
    },
    {
      "filename": "src/drd/prompts/get_project_info_prompts.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:50:11.500143",
      "content_preview": "def get_project_info_prompt(folder_structure):     return f\"\"\" Current folder structure: {folder_str...",
      "description": "This file contains a function for generating a prompt to retrieve project information based on the folder structure. It's part of the prompts module in the DRD project, which is used for generating various prompts for AI interactions.",
      "exports": "fun:get_project_info_prompt"
    },
    {
      "filename": "src/drd/metadata/initializer.py",
      "type": "Python",
      "last_modified": "2024-07-16T12:48:32.281355",
      "content_preview": "import os import json from datetime import datetime import asyncio from ..api.dravid_api import call...",
      "description": "This file contains the initialization logic for the project metadata. It includes functions to gather project information, process files, and create a metadata structure. The file interacts with various parts of the project, including API calls, file operations, and metadata management.",
      "exports": "fun:initialize_project_metadata,fun:initialize_project_metadata_sync"
    },
    {
      "filename": "src/drd/cli/ask_handler.py",
      "type": "Python",
      "last_modified": "2024-07-12T16:19:00.020116",
      "content_preview": "import click import sys from ..utils.api_utils import stream_claude_response, call_dravid_api_with_p...",
      "description": "This file contains the implementation of the 'ask' command handler for the DRD CLI tool. It includes functions for reading file content, suggesting file alternatives, and handling user queries. The file interacts with the project metadata, Claude API, and Dravid API for processing user questions and providing responses.",
      "exports": "fun:read_file_content,fun:suggest_file_alternative,fun:handle_ask_command"
    },
    {
      "filename": "README.md",
      "type": "markdown",
      "last_modified": "2024-07-16T00:34:57.464684",
      "content_preview": "# Dravid (DRD) - AI-Powered CLI Coding Framework  Dravid (DRD) is an advanced, AI-powered CLI coding...",
      "description": "This is the README.md file for the Dravid (DRD) project, an AI-powered CLI coding framework. It provides comprehensive information about the project, including its features, installation instructions, usage examples, project structure, and contribution guidelines. The README covers various use cases for different programming languages and frameworks, explains how to use Dravid's key features like self-healing fixes and metadata management, and includes important security notes for users.",
      "exports": ""
    },
    {
      "filename": "src/drd/prompts/error_resolution_prompt.py",
      "type": "Python",
      "last_modified": "2024-07-16T11:37:57.364070",
      "content_preview": "# File: prompts/error_resolution_prompts.py  def get_error_resolution_prompt(previous_context, cmd, ...",
      "description": "This file contains a function to generate an error resolution prompt for the DRD project. The prompt is designed to be used with an AI assistant to analyze errors and provide step-by-step solutions in XML format. It includes detailed instructions and guidelines for error resolution, file operations, and project setup.",
      "exports": "fun:get_error_resolution_prompt"
    },
    {
      "filename": "src/drd/metadata/rate_limit_handler.py",
      "type": "Python module",
      "last_modified": "2024-07-16T12:48:12.433825",
      "content_preview": "import asyncio import time from ..api.dravid_api import call_dravid_api_with_pagination from ..api.d...",
      "description": "This file implements a rate limiter and asynchronous processing system for handling file metadata updates. It includes a RateLimiter class to manage API call rate limits, and functions to process file metadata using the Dravid API. The module is part of the metadata management system in the DRD project, focusing on efficient and controlled API interactions for updating project file metadata.",
      "exports": "class:RateLimiter,fun:process_single_file,fun:process_files,var:rate_limiter,var:MAX_CONCURRENT_REQUESTS,var:MAX_CALLS_PER_MINUTE,var:RATE_LIMIT_PERIOD"
    },
    {
      "filename": "conftest.py",
      "type": "pytest_configuration",
      "last_modified": "2024-07-13T21:54:11.877182",
      "content_preview": "import sys import os  # Add the project root to the Python path sys.path.insert(0, os.path.abspath(o...",
      "description": "This file is a pytest configuration file (conftest.py) for the DRD project. It modifies the Python path to include the project root, enabling imports from the project's modules during testing. This setup is crucial for ensuring that tests can access all parts of the project regardless of where they are run from within the project structure.",
      "exports": ""
    },
    {
      "filename": "src/drd/cli/__init__.py",
      "type": "Python module",
      "last_modified": "2024-07-11T19:23:55.795110",
      "content_preview": "from .main import dravid_cli from .monitor import run_dev_server_with_monitoring  __all__ = ['dravid...",
      "description": "This is the __init__.py file for the drd.cli module. It imports and re-exports key functions from the cli submodules, specifically the main CLI entry point and the development server monitoring function. This file acts as an interface for the CLI functionality of the DRD project, making these functions easily accessible to other parts of the application.",
      "exports": "fun:dravid_cli,fun:run_dev_server_with_monitoring"
    },
    {
      "filename": "src/drd/prompts/instructions.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:34:57.476544",
      "content_preview": "def get_instruction_prompt():     return \"\"\"     You are an advanced project setup assistant capable...",
      "description": "This file contains a function that returns an instruction prompt for an advanced project setup assistant. The prompt provides detailed guidelines for generating precise, production-grade instructions for various programming projects. It includes XML formatting rules, important guidelines for project setup, and specific instructions for handling different scenarios like file operations, metadata updates, and image analysis.",
      "exports": "fun:get_instruction_prompt"
    },
    {
      "filename": "src/drd/metadata/common_utils.py",
      "type": "Python Utility Module",
      "last_modified": "2024-07-16T11:55:17.511015",
      "content_preview": "import os import re from ..api.dravid_api import call_dravid_api_with_pagination from ..api.dravid_p...",
      "description": "This file contains common utility functions for the DRD project's metadata management. It includes functions for parsing .gitignore files, determining which files to ignore, generating folder structures, and creating file descriptions using the Dravid API. The module is essential for project-wide file operations and metadata handling.",
      "exports": "fun:parse_gitignore,fun:should_ignore,fun:get_folder_structure,fun:get_ignore_patterns,fun:generate_file_description"
    },
    {
      "filename": "src/drd/cli/main.py",
      "type": "Python",
      "last_modified": "2024-07-14T13:53:18.998528",
      "content_preview": "import click from dotenv import load_dotenv from colorama import init from .commands import dravid_c...",
      "description": "Main CLI entry point for the DRD project. Defines the command-line interface using Click, sets up various options and arguments for different functionalities like querying, image handling, debugging, hot-fixing, metadata management, and asking questions. Utilizes environment variables and integrates with other modules in the project.",
      "exports": "fun:dravid_cli"
    },
    {
      "filename": "src/drd/cli/query/dynamic_command_handler.py",
      "type": "Python Module",
      "last_modified": "2024-07-16T14:50:27.810193",
      "content_preview": "import traceback\nimport click\nfrom ...utils.api_utils import call_dravid_api_with_pagination\nfrom .....",
      "description": "This file contains the dynamic command handler for the DRD project's CLI query functionality. It includes functions for executing various types of commands (shell, file operations, metadata updates), handling errors with the Dravid API, and updating file metadata. The module integrates closely with the project's executor, metadata manager, and API utilities. It plays a crucial role in processing and executing commands generated from user queries or error resolution attempts."
    },
    {
      "filename": "src/drd/utils/loader.py",
      "type": "Python Module",
      "last_modified": "2024-07-16T20:30:42.897795",
      "content_preview": "import click\nimport time\nimport threading\n\n\nclass Loader:\n    def __init__(self, message=\"Processing...",
      "description": "This file defines a Loader class and a run_with_loader function for creating loading animations in CLI applications. The Loader class uses threading to display a spinning animation alongside a message, providing visual feedback during long-running operations. The run_with_loader function is a utility that wraps a given function with a loading animation. This module is part of the utils package in the DRD project, enhancing the user experience by providing visual feedback during processing tasks.",
      "exports": "class:Loader,fun:run_with_loader"
    }
  ],
  "dev_server": {
    "start_command": "poetry run python src/drd/main.py",
    "framework": "None",
    "language": "Python"
  },
  "description": "DRD appears to be a Python-based CLI tool or application that involves project management, error handling, and API interactions. It includes features for querying, monitoring, metadata management, and file operations. The project uses Poetry for dependency management and has a structure that suggests it's designed for extensibility and maintainability. The presence of test directories indicates a focus on test-driven development."
}