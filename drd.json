{
  "project_name": "drd",
  "last_updated": "2024-07-16T12:39:13.620677",
  "files": [
    {
      "filename": "project_guidelines.txt",
      "type": "text",
      "last_modified": "2024-07-12T11:12:24.597437",
      "content_preview": "1. Dont use doc string. 2. If a function has more than 1 helper functions that is only tied to them,...",
      "description": "Project guidelines document outlining coding standards and practices for the DRD project. It specifies not to use docstrings, to separate functions with multiple helpers into separate files, and defines the role of the project context maintainer.",
      "exports": ""
    },
    {
      "filename": "conftest.py",
      "type": "Python Configuration",
      "last_modified": "2024-07-13T21:54:11.877182",
      "content_preview": "import sys import os  # Add the project root to the Python path sys.path.insert(0, os.path.abspath(o...",
      "description": "This file is a pytest configuration file (conftest.py) for the DRD project. It modifies the Python path to include the project root, ensuring that imports within the test suite can access all project modules correctly. This setup is crucial for running tests and maintaining proper module accessibility across the project.",
      "exports": ""
    },
    {
      "filename": "LICENSE",
      "type": "license",
      "last_modified": "2024-07-12T11:19:36.001693",
      "content_preview": "MIT License  Copyright (c) 2024 Vysakh Sreenivasan  Permission is hereby granted, free of charge, to...",
      "description": "The MIT License for the DRD project, granting permission to use, modify, and distribute the software under certain conditions. It includes copyright information for Vysakh Sreenivasan and the year 2024.",
      "exports": ""
    },
    {
      "filename": "pyproject.toml",
      "type": "pyproject.toml",
      "last_modified": "2024-07-16T00:34:57.484166",
      "content_preview": "[tool.poetry] name = \"dravid\" version = \"0.9.0\" description = \"A CLI coding super-framework using AI...",
      "description": "Configuration file for the DRD project using Poetry. It defines project metadata, dependencies, development dependencies, build system requirements, and tool-specific configurations. The file also specifies entry points for the CLI tool and test runner.",
      "exports": ""
    },
    {
      "filename": "README.md",
      "type": "markdown",
      "last_modified": "2024-07-16T00:34:57.464684",
      "content_preview": "# Dravid (DRD) - AI-Powered CLI Coding Framework  Dravid (DRD) is an advanced, AI-powered CLI coding...",
      "description": "README file for the Dravid (DRD) project. It provides a comprehensive overview of the AI-powered CLI coding framework, including installation instructions, usage examples, features, project structure, and contribution guidelines. The document covers various use cases for different programming languages and frameworks, explains the self-healing fix feature, and includes information on metadata management and image-based queries. It also addresses security concerns and provides guidance for development and testing.",
      "exports": ""
    },
    {
      "filename": "CONTRIBUTING.md",
      "type": "markdown",
      "last_modified": "2024-07-12T11:35:06.832838",
      "content_preview": "# Contributing to Dravid (DRD)  First off, thank you for considering contributing to Dravid! It's pe...",
      "description": "Contribution guidelines for the Dravid (DRD) project. It outlines how to report bugs, suggest enhancements, submit pull requests, and adhere to coding standards. The document also includes information on the project's code of conduct, styleguides for Git commit messages, Python code, and documentation.",
      "exports": ""
    },
    {
      "filename": "poetry.lock",
      "type": "dependency_lock_file",
      "last_modified": "2024-07-16T00:34:57.483863",
      "content_preview": "# This file is automatically @generated by Poetry 1.8.3 and should not be changed by hand.  [[packag...",
      "description": "Poetry lock file containing detailed dependency information for the DRD project. It lists all direct and transitive dependencies with their exact versions, ensuring reproducible builds. The file includes dependencies for development, testing, and production environments, covering libraries for CLI tools, API interactions, image processing, and testing frameworks.",
      "exports": ""
    },
    {
      "filename": "run_tests/__init__.py",
      "type": "Python Module",
      "last_modified": "2024-07-11T20:47:27.745747",
      "content_preview": "import pytest import sys   def main():     sys.exit(pytest.main([\"-v\", \"src\"]))   if __name__ == \"__...",
      "description": "This is the __init__.py file for the run_tests package in the DRD project. It contains a main function that runs pytest on the 'src' directory with verbose output. This module is likely used as an entry point for running all tests in the project.",
      "exports": "fun:main"
    },
    {
      "filename": "src/drd/__init__.py",
      "type": "Python Module",
      "last_modified": "2024-07-11T19:41:20.725604",
      "content_preview": "from .cli.main import dravid_cli from .cli.query import execute_dravid_command from .metadata.initia...",
      "description": "Main initialization file for the DRD project. It imports and exports key functions from various submodules, including CLI operations, metadata management, and Dravid command execution. This file serves as the central point for accessing core functionalities of the DRD project.",
      "exports": "fun:dravid_cli,fun:execute_dravid_command,fun:initialize_project_metadata,fun:update_metadata_with_dravid"
    },
    {
      "filename": "src/drd/main.py",
      "type": "Python",
      "last_modified": "2024-07-11T19:23:55.796604",
      "content_preview": "from .cli.main import dravid_cli  if __name__ == \"__main__\":     dravid_cli() ",
      "description": "Main entry point for the DRD (Dravid) CLI application. This file imports the dravid_cli function from the cli.main module and executes it when the script is run directly. It serves as the starting point for the command-line interface of the project.",
      "exports": "None"
    },
    {
      "filename": "src/drd/utils/__init__.py",
      "type": "Python module",
      "last_modified": "2024-07-16T12:30:59.232944",
      "content_preview": "from .utils import (     get_project_context,     print_error,     print_success,     print_info,   ...",
      "description": "This is the __init__.py file for the utils module in the drd project. It imports and re-exports various utility functions from submodules, including general utilities, API utilities, and project context management functions. The module provides essential tools for error handling, API interactions, project information retrieval, and user interface improvements like loading indicators.",
      "exports": "fun:get_project_context,fun:print_error,fun:print_success,fun:print_info,fun:print_step,fun:print_debug,fun:print_warning,fun:call_dravid_api_with_pagination,fun:call_dravid_vision_api_with_pagination,fun:fetch_project_guidelines,class:Loader,fun:run_with_loader"
    },
    {
      "filename": "src/drd/utils/pretty_print_stream.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:34:57.485973",
      "content_preview": "import re import click   def pretty_print_xml_stream(chunk, state):      state['buffer'] += chunk   ...",
      "description": "This file contains utility functions for pretty-printing XML-structured data streams in a CLI environment. It includes functionality to process and display explanations, file operations, and shell commands with color-coded output using the click library. The main function, pretty_print_xml_stream, processes chunks of XML data, extracts relevant information, and prints it in a user-friendly format.",
      "exports": "fun:pretty_print_xml_stream,fun:stream_and_print_commands"
    },
    {
      "filename": "src/drd/utils/step_executor.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:34:57.477500",
      "content_preview": "import subprocess import os import json import click from colorama import Fore, Style import time im...",
      "description": "This file contains the Executor class, which is responsible for safely executing shell commands and performing file operations within the project directory. It includes methods for checking command safety, executing shell commands with timeouts, handling file operations (create, update, delete), parsing and merging JSON, and managing environment variables. The class also integrates with the project's metadata utilities for retrieving folder structures and ignore patterns.",
      "exports": "class:Executor"
    },
    {
      "filename": "src/drd/utils/utils.py",
      "type": "Python",
      "last_modified": "2024-07-16T12:30:32.473782",
      "content_preview": "import click from colorama import Fore, Style import json import os import time import threading  ME...",
      "description": "This file contains utility functions for the DRD project. It includes functions for printing colored messages, fetching project guidelines, and a Loader class for displaying a loading animation. The file also defines a function to get project context from a metadata file.",
      "exports": "fun:get_project_context,fun:print_error,fun:print_success,fun:print_info,fun:print_warning,fun:print_debug,fun:print_step,fun:fetch_project_guidelines,class:Loader,fun:run_with_loader"
    },
    {
      "filename": "src/drd/utils/file_utils.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:46:12.764354",
      "content_preview": "import os from ..api import extract_and_parse_xml from ..utils import print_error   def parse_file_l...",
      "description": "This file contains utility functions for file operations in the DRD project. It includes functions for parsing XML responses related to file lists and file finding, as well as reading file contents. The file is part of the utils module and interacts with the API module for XML parsing.",
      "exports": "fun:parse_file_list_response,fun:get_file_content,fun:parse_find_file_response"
    },
    {
      "filename": "src/drd/utils/api_utils.py",
      "type": "Python Module",
      "last_modified": "2024-07-16T00:34:57.485763",
      "content_preview": "import requests import mimetypes import os import json import base64 from typing import Dict, Any, O...",
      "description": "This file contains utility functions for making API calls to the Claude AI service. It includes functions for handling API authentication, making API requests, parsing responses, and streaming responses. The module supports both text and vision-based queries, and implements pagination for handling long responses. It also includes error handling and XML parsing capabilities.",
      "exports": "fun:get_api_key,fun:get_headers,fun:make_api_call,fun:parse_response,fun:call_dravid_api_with_pagination,fun:call_dravid_vision_api_with_pagination,fun:stream_claude_response,fun:parse_paginated_response,var:API_URL,var:MODEL,var:MAX_TOKENS"
    },
    {
      "filename": "src/drd/utils/tests/test_pretty_print_stream.py",
      "type": "test_file",
      "last_modified": "2024-07-16T00:34:57.486199",
      "content_preview": "import pytest from drd.utils.pretty_print_stream import stream_and_print_commands   def test_basic_e...",
      "description": "This file contains unit tests for the pretty_print_stream module in the drd project. It tests various scenarios of the stream_and_print_commands function, including handling of XML-like chunks with explanations, shell commands, file operations, and CDATA sections. The tests cover different edge cases such as spaced tags, newlines in tags, multiple chunks, and large content.",
      "exports": ""
    },
    {
      "filename": "src/drd/cli/ask_handler.py",
      "type": "Python",
      "last_modified": "2024-07-12T16:19:00.020116",
      "content_preview": "import click import sys from ..utils.api_utils import stream_claude_response, call_dravid_api_with_p...",
      "description": "This file contains the implementation of the 'ask' command handler for the DRD CLI. It includes functions for reading file content, suggesting file alternatives, and handling the main ask command. The file interacts with the project metadata, Claude API, and Dravid API for processing user queries and providing contextual responses.",
      "exports": "fun:read_file_content,fun:suggest_file_alternative,fun:handle_ask_command"
    },
    {
      "filename": "src/drd/cli/__init__.py",
      "type": "Python Module",
      "last_modified": "2024-07-11T19:23:55.795110",
      "content_preview": "from .main import dravid_cli from .monitor import run_dev_server_with_monitoring  __all__ = ['dravid...",
      "description": "This is the __init__.py file for the drd.cli package. It imports and exposes key functions from the cli module, specifically the main CLI function and the development server monitoring function. This file serves as the entry point for the CLI functionality of the DRD project.",
      "exports": "fun:dravid_cli,fun:run_dev_server_with_monitoring"
    },
    {
      "filename": "src/drd/cli/main.py",
      "type": "Python",
      "last_modified": "2024-07-14T13:53:18.998528",
      "content_preview": "import click from dotenv import load_dotenv from colorama import init from .commands import dravid_c...",
      "description": "This file contains the main CLI entry point for the DRD project. It uses Click to define the command-line interface, sets up various options and arguments, and calls the main logic function. It includes options for querying, image handling, debugging, server monitoring, metadata management, and version display. The file also loads environment variables and initializes colorama for colored output.",
      "exports": "fun:dravid_cli"
    },
    {
      "filename": "src/drd/cli/commands.py",
      "type": "Python",
      "last_modified": "2024-07-16T12:34:47.387010",
      "content_preview": "import click import sys import os import asyncio from dotenv import load_dotenv from .query import e...",
      "description": "This file contains the main command-line interface logic for the DRD project. It defines functions to handle various CLI commands including querying, metadata initialization and updating, asking questions, and running a development server with monitoring. The file also imports necessary modules and defines the current version of the CLI.",
      "exports": "fun:handle_query_command,fun:dravid_cli_logic,var:VERSION"
    },
    {
      "filename": "src/drd/cli/monitor/error_resolver.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:39:09.367806",
      "content_preview": "import traceback from ...api.dravid_api import call_dravid_api_with_pagination from ...api.dravid_pa...",
      "description": "This file contains error handling functionality for the monitoring component of the DRD project. It includes a function to handle errors detected during monitoring, interact with the Dravid API for error resolution suggestions, and apply fixes based on user confirmation. The file integrates with various other modules in the project for API calls, response parsing, command execution, and user interaction.",
      "exports": "fun:monitoring_handle_error_with_dravid"
    },
    {
      "filename": "src/drd/cli/monitor/server_monitor.py",
      "type": "Python",
      "last_modified": "2024-07-14T13:53:19.013361",
      "content_preview": "import click import time import re import os from typing import Dict, Callable from ...metadata.proj...",
      "description": "This file implements a DevServerMonitor class for monitoring and managing a development server. It includes functionality for starting, stopping, and restarting the server, handling errors, and processing user input. The file also contains a run_dev_server_with_monitoring function to initiate the monitoring process. It's part of the CLI monitor module in the DRD project.",
      "exports": "class:DevServerMonitor,fun:run_dev_server_with_monitoring"
    },
    {
      "filename": "src/drd/cli/monitor/__init__.py",
      "type": "Python module",
      "last_modified": "2024-07-14T13:53:19.012436",
      "content_preview": "from .server_monitor import run_dev_server_with_monitoring  __all__ = ['run_dev_server_with_monitori...",
      "description": "This is an __init__.py file for the monitor module within the CLI package of the DRD project. It imports and exposes the run_dev_server_with_monitoring function from the server_monitor module, making it available for use in other parts of the project that import from drd.cli.monitor.",
      "exports": "fun:run_dev_server_with_monitoring"
    },
    {
      "filename": "src/drd/cli/monitor/error_handlers.py",
      "type": "Python",
      "last_modified": "2024-07-14T13:53:19.012684",
      "content_preview": "import re from .error_resolver import monitoring_handle_error_with_dravid   def handle_module_not_fo...",
      "description": "This file contains error handling functions for the monitoring module in the DRD CLI tool. It includes handlers for module not found errors, syntax errors, and general errors. These functions parse error messages and use the error_resolver module to handle errors with the Dravid API.",
      "exports": "fun:handle_module_not_found,fun:handle_syntax_error,fun:handle_general_error"
    },
    {
      "filename": "src/drd/cli/query/__init__.py",
      "type": "Python module",
      "last_modified": "2024-07-16T00:57:47.212583",
      "content_preview": "from .main import execute_dravid_command from .file_operations import get_files_to_modify from .imag...",
      "description": "This is the __init__.py file for the query module within the DRD CLI tool. It imports and exports key functions from other modules within the query package, making them available for use in other parts of the project. The module appears to handle Dravid command execution, file operations, and image queries.",
      "exports": "fun:execute_dravid_command,fun:get_files_to_modify,fun:handle_image_query"
    },
    {
      "filename": "src/drd/cli/query/error_handling.py",
      "type": "Python Module",
      "last_modified": "2024-07-16T11:39:41.450600",
      "content_preview": "import traceback import click from ...utils.api_utils import call_dravid_api_with_pagination from .....",
      "description": "This file contains error handling functionality for the DRD project's CLI query module. It includes functions to handle errors using the Dravid API, parse responses, and apply fix commands. The module integrates with the project's metadata management, command execution, and API utilities.",
      "exports": "fun:handle_error_with_dravid,fun:apply_fix_commands"
    },
    {
      "filename": "src/drd/cli/query/image_handler.py",
      "type": "Python module",
      "last_modified": "2024-07-12T16:15:26.159325",
      "content_preview": "from ...api.dravid_api import call_dravid_vision_api_with_pagination   def handle_image_query(query,...",
      "description": "This module handles image queries by interfacing with the Dravid Vision API. It provides a function to process image-based queries with optional instruction prompts, utilizing pagination for the API calls. The module is part of the CLI query handling system in the DRD project.",
      "exports": "fun:handle_image_query"
    },
    {
      "filename": "src/drd/cli/query/main.py",
      "type": "Python module",
      "last_modified": "2024-07-16T12:31:42.883661",
      "content_preview": "import click from ...api.dravid_api import stream_dravid_api, call_dravid_vision_api from ...api.dra...",
      "description": "Main module for the query functionality in the DRD CLI tool. It handles the execution of Dravid commands, including API calls, error handling, file operations, and metadata management. The module integrates various components of the DRD project, such as the Dravid API, project metadata, file operations, and error resolution.",
      "exports": "fun:execute_dravid_command,fun:handle_command"
    },
    {
      "filename": "src/drd/cli/query/file_operations.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:47:09.962574",
      "content_preview": "import os from ...api import call_dravid_api_with_pagination from ...utils import print_error, print...",
      "description": "This file contains utility functions for file operations within the DRD project. It includes functions to get files to modify based on a query and to find files using the Dravid API. The file interacts with the project metadata, Dravid API, and uses various prompts for generating queries.",
      "exports": "fun:get_files_to_modify,fun:find_file_with_dravid"
    },
    {
      "filename": "src/drd/cli/query/tests/test_file_operations.py",
      "type": "test_file",
      "last_modified": "2024-07-11T21:05:52.324785",
      "content_preview": "from src.drd.cli.query.file_operations import get_files_to_modify, get_file_content, find_file_with_...",
      "description": "This file contains unit tests for the file_operations module in the DRD project. It tests functions such as get_files_to_modify, get_file_content, and find_file_with_dravid. The tests use mocking to simulate API calls and file system operations. The file is part of the test suite for the query functionality in the CLI component of the DRD project.",
      "exports": "class:TestFileOperations"
    },
    {
      "filename": "src/drd/cli/query/tests/test_image_handler.py",
      "type": "test_file",
      "last_modified": "2024-07-11T21:08:44.260794",
      "content_preview": "from src.drd.cli.query.image_handler import handle_image_query import unittest from unittest.mock im...",
      "description": "Unit tests for the image_handler module in the DRD project. It contains test cases for the handle_image_query function, including scenarios with and without instruction prompts. The tests mock the call_dravid_vision_api function to verify correct behavior and argument passing.",
      "exports": "class:TestImageHandler"
    },
    {
      "filename": "src/drd/prompts/get_project_info_prompts.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:50:11.500143",
      "content_preview": "def get_project_info_prompt(folder_structure):     return f\"\"\" Current folder structure: {folder_str...",
      "description": "This file contains a function to generate a prompt for gathering project information based on the provided folder structure. It's part of the prompts module in the DRD project, which is a custom CLI tool for various operations including project analysis.",
      "exports": "fun:get_project_info_prompt"
    },
    {
      "filename": "src/drd/prompts/error_resolution_prompt.py",
      "type": "Python",
      "last_modified": "2024-07-16T11:37:57.364070",
      "content_preview": "# File: prompts/error_resolution_prompts.py  def get_error_resolution_prompt(previous_context, cmd, ...",
      "description": "This file contains a function to generate an error resolution prompt for the DRD project. It provides a structured format for error analysis and resolution, including guidelines for generating XML-formatted responses with steps to fix errors. The prompt includes context about the error, project details, and specific instructions for the AI assistant to follow when providing solutions.",
      "exports": "fun:get_error_resolution_prompt"
    },
    {
      "filename": "src/drd/prompts/instructions.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:34:57.476544",
      "content_preview": "def get_instruction_prompt():     return \"\"\"     You are an advanced project setup assistant capable...",
      "description": "This file contains a function that returns an instruction prompt for an advanced project setup assistant. The prompt provides detailed guidelines for generating precise, production-grade instructions for various programming projects. It includes rules for XML formatting, command execution, file operations, metadata updates, and best practices for project setup across different languages and frameworks.",
      "exports": "fun:get_instruction_prompt"
    },
    {
      "filename": "src/drd/prompts/__init__.py",
      "type": "Python Module",
      "last_modified": "2024-07-16T11:40:40.664052",
      "content_preview": "from .instructions import get_instruction_prompt from .file_operations import get_file_identificatio...",
      "description": "This is the __init__.py file for the prompts module in the DRD project. It imports and re-exports specific functions from the instructions and file_operations modules, making them easily accessible when the prompts module is imported elsewhere in the project. This file serves as an interface for the prompts module, providing a clear and organized way to access key prompt-related functionality.",
      "exports": "fun:get_instruction_prompt,fun:get_file_identification_prompt,fun:get_file_description_prompt"
    },
    {
      "filename": "src/drd/prompts/metadata_update_prompts.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:51:48.086804",
      "content_preview": "# File: prompts/metadata_update_prompts.py  def get_file_suggestion_prompt(filename, project_context...",
      "description": "This file contains prompt generation functions for metadata updates in the DRD project. It includes functions to suggest alternative file paths when a file is not found and to identify files that need metadata updates based on user descriptions. These prompts are designed to be used with an AI assistant to maintain and update project metadata.",
      "exports": "fun:get_file_suggestion_prompt,fun:get_files_to_update_prompt"
    },
    {
      "filename": "src/drd/prompts/file_operations.py",
      "type": "Python module",
      "last_modified": "2024-07-16T00:45:44.675604",
      "content_preview": "def get_file_identification_prompt():     return \"\"\"You are a file identification assistant. Based o...",
      "description": "Contains prompts for file operations, including identification, description, modification, and file finding",
      "exports": "fun:get_file_identification_prompt,fun:get_file_description_prompt,fun:get_files_to_modify_prompt,fun:find_file_prompt"
    },
    {
      "filename": "src/drd/prompts/file_metada_desc_prompts.py",
      "type": "Python",
      "last_modified": "2024-07-16T11:34:23.052269",
      "content_preview": "# File: prompts/file_metadata_prompts.py  def get_file_metadata_prompt(filename, content, project_co...",
      "description": "This file contains a function to generate a prompt for file metadata description. It's part of the prompts module in the DRD project, which is a custom CLI tool. The function takes into account the project context, folder structure, filename, and file content to create a comprehensive prompt for an AI assistant to generate metadata for project files.",
      "exports": "fun:get_file_metadata_prompt"
    },
    {
      "filename": "src/drd/prompts/monitor_error_resolution.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:38:24.751015",
      "content_preview": "# File: prompts/error_resolution_prompt.py  def get_error_resolution_prompt(error_type, error_messag...",
      "description": "This file contains a function to generate an error resolution prompt for the DRD project's server monitoring system. It takes error details and project context as input and returns a formatted prompt string for an AI assistant to analyze and provide steps to fix the error.",
      "exports": "fun:get_error_resolution_prompt"
    },
    {
      "filename": "src/drd/api/dravid_api.py",
      "type": "Python module",
      "last_modified": "2024-07-16T00:34:57.484397",
      "content_preview": "from ..utils.api_utils import call_dravid_api_with_pagination, call_dravid_vision_api_with_paginatio...",
      "description": "This file contains functions for interacting with the Dravid API, including streaming responses, parsing XML, and handling both regular and vision API calls. It utilizes utility functions from other modules for API communication, error handling, and output formatting. The module implements XML parsing for streaming responses and provides functions to call the Dravid API with various options.",
      "exports": "fun:stream_dravid_api,fun:call_dravid_api,fun:call_dravid_vision_api"
    },
    {
      "filename": "src/drd/api/__init__.py",
      "type": "Python module",
      "last_modified": "2024-07-12T16:15:14.091799",
      "content_preview": "from .dravid_api import call_dravid_api_with_pagination, call_dravid_vision_api_with_pagination from...",
      "description": "This is the __init__.py file for the api module in the drd project. It imports and re-exports key functions from dravid_api and dravid_parser modules, making them easily accessible when importing from the api package. The functions are related to calling Dravid API with pagination, handling vision API calls, parsing Dravid responses, and extracting and parsing XML.",
      "exports": "fun:call_dravid_api_with_pagination,fun:call_dravid_vision_api_with_pagination,fun:parse_dravid_response,fun:extract_and_parse_xml"
    },
    {
      "filename": "src/drd/api/dravid_parser.py",
      "type": "Python",
      "last_modified": "2024-07-16T00:34:57.484695",
      "content_preview": "import xml.etree.ElementTree as ET from typing import List, Dict, Any import re import click from py...",
      "description": "This file contains utility functions for parsing and processing XML responses from the Dravid API. It includes functions for extracting XML content, escaping special characters, parsing the XML structure, and pretty-printing the parsed commands. The file is part of the API module in the DRD project and is crucial for interpreting and displaying API responses.",
      "exports": "fun:extract_outermost_xml,fun:escape_nested_cdata,fun:escape_special_characters,fun:extract_and_parse_xml,fun:parse_dravid_response,fun:pretty_print_commands"
    },
    {
      "filename": "src/drd/api/tests/test_dravid_parser.py",
      "type": "unit_test",
      "last_modified": "2024-07-11T20:45:24.990520",
      "content_preview": "import unittest from src.drd.api.dravid_parser import extract_and_parse_xml, parse_dravid_response  ...",
      "description": "Unit tests for the dravid_parser module in the DRD project. Tests include validation of XML extraction, parsing of Dravid API responses, and handling of invalid XML input. The test suite covers the extract_and_parse_xml and parse_dravid_response functions from the dravid_parser module.",
      "exports": "class:TestDravidParser"
    },
    {
      "filename": "src/drd/metadata/project_metadata.py",
      "type": "python",
      "last_modified": "2024-07-12T11:57:56.981605",
      "content_preview": "import json import os from datetime import datetime  class ProjectMetadataManager:     def __init__(...",
      "description": "This file defines a ProjectMetadataManager class responsible for managing project metadata. It handles loading, saving, and updating metadata for the project, including file-specific information and development server details. The class provides methods for updating file metadata, removing file entries, retrieving file metadata, and managing development server information.",
      "exports": "class:ProjectMetadataManager"
    },
    {
      "filename": "src/drd/metadata/__init__.py",
      "type": "Python Module",
      "last_modified": "2024-07-11T19:23:55.796851",
      "content_preview": "from .initializer import initialize_project_metadata from .updater import update_metadata_with_dravi...",
      "description": "This is the __init__.py file for the metadata package in the DRD project. It imports and re-exports key functions and classes from the metadata submodules, including initializer, updater, and project_metadata. This file serves as the main entry point for accessing metadata-related functionality in the DRD project.",
      "exports": "fun:initialize_project_metadata,fun:update_metadata_with_dravid,class:ProjectMetadataManager"
    },
    {
      "filename": "src/drd/metadata/updater.py",
      "type": "Python module",
      "last_modified": "2024-07-16T00:52:11.953961",
      "content_preview": "import os from ..api.dravid_api import call_dravid_api_with_pagination from ..api.dravid_parser impo...",
      "description": "This file, updater.py, is part of the metadata management system in the DRD project. It contains functions for updating project metadata using the Dravid API. Key functionalities include finding files with Dravid's assistance, updating metadata based on project descriptions, and processing files for metadata updates or removals. The module interacts with other parts of the project such as the API, project metadata manager, and utility functions for file operations and prompts.",
      "exports": "fun:find_file_with_dravid,fun:update_metadata_with_dravid"
    },
    {
      "filename": "src/drd/metadata/initializer.py",
      "type": "Python Module",
      "last_modified": "2024-07-16T12:38:45.574188",
      "content_preview": "import os import json from datetime import datetime import asyncio from ..api.dravid_api import call...",
      "description": "This module is responsible for initializing project metadata. It reads the project structure, interacts with the Dravid API to get project information, processes files asynchronously, and creates a comprehensive metadata structure. The module includes functions for handling ignore patterns, folder structure generation, and rate-limited file processing. It's a crucial part of the project's metadata management system.",
      "exports": "fun:initialize_project_metadata,fun:initialize_project_metadata_sync"
    },
    {
      "filename": "src/drd/metadata/rate_limit_handler.py",
      "type": "Python module",
      "last_modified": "2024-07-16T12:37:41.076631",
      "content_preview": "import asyncio from ..api.dravid_api import call_dravid_api_with_pagination from ..api.dravid_parser...",
      "description": "A rate limit handler module for the DRD project. It contains asynchronous functions to process file metadata using the Dravid API. The module handles API calls, XML parsing, and metadata extraction for multiple files concurrently.",
      "exports": "fun:process_single_file,fun:process_files"
    },
    {
      "filename": "src/drd/metadata/common_utils.py",
      "type": "Python Utility Module",
      "last_modified": "2024-07-16T11:55:17.511015",
      "content_preview": "import os import re from ..api.dravid_api import call_dravid_api_with_pagination from ..api.dravid_p...",
      "description": "This file contains utility functions for parsing .gitignore files, determining which files to ignore, generating folder structures, and creating file descriptions using the Dravid API. It's part of the metadata management system in the DRD project, supporting the custom CLI tool with file operations and project structure analysis.",
      "exports": "fun:parse_gitignore,fun:should_ignore,fun:get_folder_structure,fun:get_ignore_patterns,fun:generate_file_description"
    },
    {
      "filename": "src/drd/metadata/tests/test_initializer.py",
      "type": "Python test file",
      "last_modified": "2024-07-11T21:20:52.523496",
      "content_preview": "from src.drd.metadata.initializer import initialize_project_metadata import unittest from unittest.m...",
      "description": "Unit tests for the initialize_project_metadata function in the src/drd/metadata/initializer.py file. It tests various scenarios including initializing metadata for a new project, updating existing metadata, and handling file creation errors. The tests use unittest framework and mock objects to simulate file operations and JSON handling.",
      "exports": "class:TestMetadataInitializer"
    },
    {
      "filename": "src/drd/metadata/tests/test_project_metadata.py",
      "type": "python",
      "last_modified": "2024-07-11T21:19:24.426312",
      "content_preview": "from src.drd.metadata.project_metadata import ProjectMetadataManager import unittest from unittest.m...",
      "description": "Unit tests for the ProjectMetadataManager class in the drd project. This file contains test cases for various methods of the ProjectMetadataManager, including loading and saving metadata, updating file metadata, getting project context, updating and retrieving dev server information, and updating metadata from files. It uses unittest and mock objects to simulate file operations and method calls.",
      "exports": "class:TestProjectMetadataManager"
    }
  ],
  "dev_server": {
    "start_command": "poetry run python src/drd/main.py",
    "framework": "Custom CLI",
    "language": "Python"
  },
  "description": "DRD appears to be a Python-based project that implements a custom CLI (Command Line Interface) tool. The project structure suggests it's designed for handling various operations including file management, API interactions, error resolution, and server monitoring. It utilizes prompts for user interactions and includes features for metadata management and image handling. The project seems to be well-organized with separate modules for different functionalities and includes test suites for various components."
}