import unittest from unittest.mock import patch, MagicMock, call import requests from drd.cli.query.main import execute_dravid_command class TestExecuteDravidCommand(unittest.TestCase): def setUp(self): self.executor = MagicMock() self.metadata_manager = MagicMock() self.query = "Test query" self.image_path = None self.debug = False self.instruction_prompt = None @patch('drd.cli.query.main.Executor') @patch('drd.cli.query.main.ProjectMetadataManager') @patch('drd.cli.query.main.stream_dravid_api') @patch('drd.cli.query.main.execute_commands') @patch('drd.cli.query.main.print_debug') @patch('drd.cli.query.main.print_error') @patch('drd.cli.query.main.get_files_to_modify') @patch('drd.cli.query.main.run_with_loader') def test_execute_dravid_command_debug_mode(self, mock_run_with_loader, mock_get_files, mock_print_error, mock_print_debug, mock_execute_commands, mock_stream_api, mock_metadata_manager, mock_executor): self.debug = True mock_executor.return_value = self.executor mock_metadata_manager.return_value = self.metadata_manager self.metadata_manager.get_project_context.return_value = "Test project context" mock_get_files.return_value = ["file1.py", "file2.py"] mock_stream_api.return_value = """ <response> <steps> <step> <type>shell</type> <command> echo \