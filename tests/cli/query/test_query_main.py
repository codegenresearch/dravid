import unittest\nfrom unittest.mock import patch, MagicMock, call\nimport requests\nfrom drd.cli.query.main import execute_dravid_command\n\nclass TestExecuteDravidCommand(unittest.TestCase):\n\n    def setUp(self):\n        self.executor = MagicMock()\n        self.metadata_manager = MagicMock()\n        self.query = "Test query"\n        self.image_path = None\n        self.debug = False\n        self.instruction_prompt = None\n\n    @patch('drd.cli.query.main.Executor')\n    @patch('drd.cli.query.main.ProjectMetadataManager')\n    @patch('drd.cli.query.main.stream_dravid_api')\n    @patch('drd.cli.query.main.execute_commands')\n    @patch('drd.cli.query.main.print_debug')\n    @patch('drd.cli.query.main.print_error')\n    @patch('drd.cli.query.main.get_files_to_modify')\n    @patch('drd.cli.query.main.run_with_loader')\n    def test_execute_dravid_command_debug_mode(self, mock_run_with_loader, mock_get_files, mock_print_error,\n                                               mock_print_debug, mock_execute_commands, mock_stream_api,\n                                               mock_metadata_manager, mock_executor):\n        self.debug = True\n        mock_executor.return_value = self.executor\n        mock_metadata_manager.return_value = self.metadata_manager\n        self.metadata_manager.get_project_context.return_value = "Test project context"\n        mock_get_files.return_value = ["file1.py", "file2.py"]\n\n        mock_stream_api.return_value = """\n        <response>\n            <steps>\n                <step>\n                    <type>shell</type>\n                    <command>echo \