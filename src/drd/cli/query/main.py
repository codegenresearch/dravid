import click\nfrom ...api.main import stream_dravid_api, call_dravid_vision_api\nfrom ...utils.step_executor import Executor\nfrom ...metadata.project_metadata import ProjectMetadataManager\nfrom .dynamic_command_handler import handle_error_with_dravid, execute_commands\nfrom ...utils import print_error, print_success, print_info, print_debug, print_warning, run_with_loader, print_header, print_step\nfrom ...utils.file_utils import get_file_content, fetch_project_guidelines, is_directory_empty\nfrom .file_operations import get_files_to_modify\nfrom ...utils.parser import parse_dravid_response\n\ndef execute_dravid_command(query, image_path, debug, instruction_prompt, warn=None):\n    print_header("🚀 Starting Dravid CLI tool...")\n    if warn:\n        print_warning("⚠️ Please make sure you are in a fresh directory.")\n        print_warning("⚠️ If it is an existing project, please ensure you're in a git branch.")\n\n    executor = Executor()\n    metadata_manager = ProjectMetadataManager(executor.current_dir)\n\n    try:\n        project_context = metadata_manager.get_project_context()\n\n        if project_context:\n            print_step("🔍 Identifying related files to the query...")\n            print_info("💬 LLM calls to be made: 1")\n            files_to_modify = run_with_loader(\n                lambda: get_files_to_modify(query, project_context),\n                "🔍 Analyzing project files"\n            )\n\n            print_info(f"🔍 Found {len(files_to_modify)} potentially relevant files.")\n            if debug:\n                print_info("🔧 Possible files to be modified:")\n                for file in files_to_modify:\n                    print(f"🔧   - {file}")\n\n            print_step("📖 Reading file contents...")\n            file_contents = {}\n            for file in files_to_modify:\n                content = get_file_content(file)\n                if content:\n                    file_contents[file] = content\n                    print_info(f"📖   - Read content of {file}")\n\n            project_guidelines = fetch_project_guidelines(executor.current_dir)\n            file_context = "\n".join([f"Current content of {file}:\