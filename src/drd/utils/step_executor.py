import subprocess\nimport os\nimport json\nimport click\nfrom colorama import Fore, Style\nimport time\nimport re\nfrom .utils import print_error, print_success, print_info, print_warning, create_confirmation_box\nfrom .diff import preview_file_changes\nfrom .apply_file_changes import apply_changes\nfrom ..metadata.common_utils import get_ignore_patterns, get_folder_structure\n\n\nclass Executor:\n    def __init__(self):\n        self.current_dir = os.getcwd()\n        self.allowed_directories = [self.current_dir, '/fake/path']\n\n        self.initial_dir = self.current_dir\n        self.disallowed_commands = [\n            'rmdir', 'del', 'format', 'mkfs',\n            'dd', 'fsck', 'mkswap', 'mount', 'umount',\n            'sudo', 'su', 'chown', 'chmod'\n        ]\n        self.env = os.environ.copy()\n\n    def is_safe_path(self, path):\n        full_path = os.path.abspath(path)\n        return any(full_path.startswith(allowed_dir) for allowed_dir in self.allowed_directories) or full_path == self.current_dir\n\n    def is_safe_rm_command(self, command):\n        parts = command.split()\n        if parts[0] != 'rm':\n            return False\n\n        # Check for dangerous flags\n        dangerous_flags = ['-r', '-f', '-rf', '-fr']\n        if any(flag in parts for flag in dangerous_flags):\n            return False\n\n        # Check if it's removing a specific file\n        if len(parts) != 2:\n            return False\n\n        file_to_remove = parts[1]\n        return self.is_safe_path(file_to_remove) and os.path.isfile(os.path.join(self.current_dir, file_to_remove))\n\n    def is_safe_command(self, command):\n        command_parts = command.split()\n        if command_parts[0] == 'rm':\n            return self.is_safe_rm_command(command)\n        return not any(cmd in self.disallowed_commands for cmd in command_parts)\n\n    def perform_file_operation(self, operation, filename, content=None, force=False):\n        full_path = os.path.abspath(os.path.join(self.current_dir, filename))\n\n        if not self.is_safe_path(full_path):\n            confirmation_box = create_confirmation_box(\n                filename, f"File operation is being carried out outside of the project directory. {operation.lower()} this file")\n            print(confirmation_box)\n            if not click.confirm(f"{Fore.YELLOW}Confirm {operation.lower()} [y/N]: {Style.RESET_ALL}", default=False):\n                print_info(f"File {operation.lower()} cancelled by user.")\n                return "Skipping this step"\n\n        print_info(f"File: {filename}")\n\n        if operation == 'CREATE':\n            if os.path.exists(full_path) and not force:\n                print_info(f"File already exists: {filename}")\n                return False\n            try:\n                os.makedirs(os.path.dirname(full_path), exist_ok=True)\n                preview = preview_file_changes(\n                    operation, filename, new_content=content)\n                print(preview)\n                if click.confirm(f"{Fore.YELLOW}Confirm creation [y/N]: {Style.RESET_ALL}", default=False):\n                    with open(full_path, 'w') as f:\n                        f.write(content)\n                    print_success(f"File created successfully: {filename}")\n                    return True\n                else:\n                    print_info("File creation cancelled by user.")\n                    return "Skipping this step"\n            except Exception as e:\n                print_error(f"Error creating file: {str(e)}")\n                return False\n\n        elif operation == 'UPDATE':\n            if not os.path.exists(full_path):\n                print_info(f"File does not exist: {filename}")\n                return False\n            try:\n                with open(full_path, 'r') as f:\n                    original_content = f.read()\n\n                if content:\n                    updated_content = apply_changes(original_content, content)\n                    preview = preview_file_changes(\n                        operation, filename, new_content=updated_content, original_content=original_content)\n                    print(preview)\n                    confirmation_box = create_confirmation_box(\n                        filename, f"{operation.lower()} this file")\n                    print(confirmation_box)\n\n                    if click.confirm(f"{Fore.YELLOW}Confirm update [y/N]: {Style.RESET_ALL}", default=False):\n                        with open(full_path, 'w') as f:\n                            f.write(updated_content)\n                        print_success(f"File updated successfully: {filename}")\n                        return True\n                    else:\n                        print_info(f"File update cancelled by user.")\n                        return "Skipping this step"\n                else:\n                    print_error(\n                        "No content or changes provided for update operation")\n                    return False\n            except Exception as e:\n                print_error(f"Error updating file: {str(e)}")\n                return False\n\n        elif operation == 'DELETE':\n            if not os.path.isfile(full_path):\n                print_info(\n                    f"Delete operation is only allowed for files: {filename}")\n                return False\n            confirmation_box = create_confirmation_box(\n                filename, f"{operation.lower()} this file")\n            print(confirmation_box)\n            if click.confirm(f"{Fore.YELLOW}Confirm deletion [y/N]: {Style.RESET_ALL}", default=False):\n                try:\n                    os.remove(full_path)\n                    print_success(f"File deleted successfully: {filename}")\n                    return True\n                except Exception as e:\n                    print_error(f"Error deleting file: {str(e)}")\n                    return False\n            else:\n                print_info("File deletion cancelled by user.")\n                return "Skipping this step"\n\n        else:\n            print_error(f"Unknown file operation: {operation}")\n            return False\n\n    def parse_json(self, json_string):\n        try:\n            return json.loads(json_string)\n        except json.JSONDecodeError as e:\n            print_error(f"JSON parsing error: {str(e)}")\n            return None\n\n    def merge_json(self, existing_content, new_content):\n        try:\n            existing_json = json.loads(existing_content)\n            new_json = json.loads(new_content)\n            merged_json = {**existing_json, **new_json}\n            return json.dumps(merged_json, indent=2)\n        except json.JSONDecodeError as e:\n            print_error(f"Error merging JSON content: {str(e)}")\n            return None\n\n    def get_folder_structure(self):\n        ignore_patterns, _ = get_ignore_patterns(self.current_dir)\n        return get_folder_structure(self.current_dir, ignore_patterns)\n\n    def execute_shell_command(self, command, timeout=300):  # 5 minutes timeout\n        if not self.is_safe_command(command):\n            print_warning(f"Please verify the command once: {command}")\n\n        confirmation_box = create_confirmation_box(\n            command, "execute this command")\n        print(confirmation_box)\n\n        if not click.confirm(f"{Fore.YELLOW}Confirm execution [y/N]: {Style.RESET_ALL}", default=False):\n            print_info("Command execution cancelled by user.")\n            return 'Skipping this step...'\