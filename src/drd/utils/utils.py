import click\nfrom colorama import Fore, Style, Back\nimport json\nimport os\nimport shutil\n\nMETADATA_FILE = 'drd.json'\n\ndef print_error(message):\n    click.echo(f"{Fore.RED}✘ {message}{Style.RESET_ALL}")\n\ndef print_success(message):\n    click.echo(f"{Fore.GREEN}✔ {message}{Style.RESET_ALL}")\n\ndef print_prompt(message, indent=0):\n    click.echo(f"{Fore.BLUE}{Style.BRIGHT}{' ' * indent}ℹ {message}{Style.RESET_ALL}")\n\ndef print_warning(message):\n    click.echo(f"{Fore.YELLOW}⚠ {message}{Style.RESET_ALL}")\n\ndef print_debug(message):\n    click.echo(click.style(f"DEBUG: {message}", fg="cyan"))\n\ndef print_step(step_number, total_steps, message):\n    click.echo(f"{Fore.CYAN}[{step_number}/{total_steps}] {message}{Style.RESET_ALL}")\n\ndef print_header(header_text):\n    click.echo(click.style(f"{'=' * 40}\n{header_text}\n{'=' * 40}", fg="blue", bold=True))\n\ndef create_confirmation_box(title, command, action):\n    terminal_width = shutil.get_terminal_size().columns\n    max_width = min(terminal_width - 4, 80)\n    title_lines = [f"{Fore.YELLOW}║ {line} {Fore.YELLOW}║" for line in title.split('\n') if line]\n    command_str = json.dumps(command, indent=2)\n    command_lines = command_str.split('\n')\n    action_line = f"{Fore.YELLOW}║  Do you want to {action}? (yes/no)  {Fore.YELLOW}║"\n\n    max_line_length = max(len(line) for line in title_lines + command_lines + [action_line])\n    box_width = min(max_line_length + 4, max_width)\n\n    box_top = f"{Fore.YELLOW}╔{'═' * box_width}╗"\n    box_bottom = f"{Fore.YELLOW}╚{'═' * box_width}╝"\n    box_title = [f"{Fore.YELLOW}║ {line.ljust(box_width - 4)} {Fore.YELLOW}║" for line in title_lines]\n    box_command = [f"{Fore.YELLOW}║ {line.ljust(box_width - 4)} {Fore.YELLOW}║" for line in command_lines]\n\n    confirmation_box = f"\n{box_top}\n{Fore.YELLOW}║  {Back.RED}{Fore.WHITE}CONFIRMATION REQUIRED{Style.RESET_ALL}{Fore.YELLOW}  ║\n" + '\n'.join(box_title) + f"\n{Fore.YELLOW}╠{'═' * box_width}╣\n" + '\n'.join(box_command) + f"\n{action_line}\n{box_bottom}{Style.RESET_ALL}"\n    return confirmation_box\n\ndef print_command_details(commands):\n    for index, cmd in enumerate(commands, start=1):\n        cmd_type = cmd.get('type', 'Unknown')\n        print_prompt(f"Command {index} - Type: {cmd_type}")\n\n        if cmd_type == 'shell':\n            print_prompt(f"  Command: {cmd.get('command', 'N/A')}")\n\n        elif cmd_type == 'explanation':\n            print_prompt(f"  Explanation: {cmd.get('content', 'N/A')}")\n\n        elif cmd_type == 'file':\n            operation = cmd.get('operation', 'N/A')\n            filename = cmd.get('filename', 'N/A')\n            content_preview = cmd.get('content', 'N/A')\n            if len(content_preview) > 50:\n                content_preview = content_preview[:50] + "..."\n            print_prompt(f"  Operation: {operation}")\n            print_prompt(f"  Filename: {filename}")\n            print_prompt(f"  Content: {content_preview}")\n\n        elif cmd_type == 'metadata':\n            operation = cmd.get('operation', 'N/A')\n            print_prompt(f"  Operation: {operation}")\n            if operation == 'UPDATE_DEV_SERVER':\n                print_prompt(f"  Start Command: {cmd.get('start_command', 'N/A')}")\n                print_prompt(f"  Framework: {cmd.get('framework', 'N/A')}")\n                print_prompt(f"  Language: {cmd.get('language', 'N/A')}")\n            elif operation in ['UPDATE_FILE', 'UPDATE']:\n                print_prompt(f"  Filename: {cmd.get('filename', 'N/A')}")\n                print_prompt(f"  Language: {cmd.get('language', 'N/A')}")\n                print_prompt(f"  Description: {cmd.get('description', 'N/A')}")\n\n        else:\n            print_warning(f"  Unknown command type: {cmd_type}")\n