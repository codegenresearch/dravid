import click\nfrom colorama import Fore, Style, Back\nimport json\nimport os\nimport shutil\n\ndef print_error(message):\n    click.echo(f"{Fore.RED}✘ {message}{Style.RESET_ALL}")\n\ndef print_success(message):\n    click.echo(f"{Fore.GREEN}✔ {message}{Style.RESET_ALL}")\n\ndef print_info(message, indent=0):\n    click.echo(f"{Fore.BLUE}{\" \" * indent}\u2713 {message}{Style.RESET_ALL}")\n\ndef print_warning(message):\n    click.echo(f"{Fore.YELLOW}⚠ {message}{Style.RESET_ALL}")\n\ndef print_debug(message):\n    click.echo(click.style(f"DEBUG: {message}", fg="cyan"))\n\ndef print_step(step_number, total_steps, message):\n    click.echo(f"{Fore.CYAN}[{step_number}/{total_steps}] {message}{Style.RESET_ALL}")\n\ndef print_header(message):\n    click.echo(click.style(f"{message}", fg="magenta", bold=True))\n\ndef print_prompt(message):\n    click.echo(click.style(f"{message}", fg="yellow", bold=True))\n\ndef create_confirmation_box(prompt, action):\n    terminal_width = shutil.get_terminal_size().columns\n    box_width = min(len(prompt) + 4, terminal_width - 4)\n    box_top = f"{Fore.YELLOW}+{\u2550 * box_width}+{Style.RESET_ALL}"\n    box_bottom = f"{Fore.YELLOW}+{\u2550 * box_width}+{Style.RESET_ALL}"\n    box_content = f"{Fore.YELLOW}| {prompt.center(box_width - 2)} |{Style.RESET_ALL}"\n    action_line = f"{Fore.YELLOW}| {action.center(box_width - 2)} |{Style.RESET_ALL}"\n    confirmation_box = f"\n{box_top}\n{Fore.YELLOW}| {Back.RED}{Fore.WHITE} CONFIRMATION REQUIRED {Style.RESET_ALL}{Fore.YELLOW} |{Style.RESET_ALL}\n{box_content}\n{Fore.YELLOW}+{\u2550 * box_width}+{Style.RESET_ALL}\n{action_line}\n{box_bottom}\n{Style.RESET_ALL}\n"\n    return confirmation_box\n\ndef print_command_details(commands):\n    for index, cmd in enumerate(commands, start=1):\n        cmd_type = cmd.get('type', 'Unknown')\n        print_info(f"Command {index} - Type: {cmd_type}", indent=2)\n\n        if cmd_type == 'shell':\n            print_info(f" Command: {cmd.get('command', 'N/A')}", indent=4)\n        elif cmd_type == 'explanation':\n            print_info(f" Explanation: {cmd.get('content', 'N/A')}", indent=4)\n        elif cmd_type == 'file':\n            operation = cmd.get('operation', 'N/A')\n            filename = cmd.get('filename', 'N/A')\n            content_preview = cmd.get('content', 'N/A')\n            if len(content_preview) > 50:\n                content_preview = content_preview[:50] + "..."\n            print_info(f" Operation: {operation}", indent=4)\n            print_info(f" Filename: {filename}", indent=4)\n            print_info(f" Content: {content_preview}", indent=4)\n        elif cmd_type == 'metadata':\n            operation = cmd.get('operation', 'N/A')\n            print_info(f" Operation: {operation}", indent=4)\n            if operation == 'UPDATE_DEV_SERVER':\n                print_info(f" Start Command: {cmd.get('start_command', 'N/A')}", indent=4)\n                print_info(f" Framework: {cmd.get('framework', 'N/A')}", indent=4)\n                print_info(f" Language: {cmd.get('language', 'N/A')}", indent=4)\n            elif operation in ['UPDATE_FILE', 'UPDATE']:\n                print_info(f" Filename: {cmd.get('filename', 'N/A')}", indent=4)\n                print_info(f" Language: {cmd.get('language', 'N/A')}", indent=4)\n                print_info(f" Description: {cmd.get('description', 'N/A')}", indent=4)\n        else:\n            print_warning(f" Unknown command type: {cmd_type}", indent=4)\n